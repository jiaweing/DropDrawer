{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dropdrawer",
  "type": "registry:component",
  "title": "DropDrawer",
  "description": "A responsive component that automatically switches between a dropdown menu on desktop and a drawer on mobile devices for shadcn/ui.",
  "dependencies": [
    "lucide-react",
    "vaul",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-dropdown-menu"
  ],
  "registryDependencies": [
    "dropdown-menu",
    "drawer",
    "use-mobile"
  ],
  "files": [
    {
      "path": "components/ui/dropdrawer.tsx",
      "content": "\"use client\";\n\nimport { ChevronRightIcon } from \"lucide-react\";\nimport * as React from \"react\";\n\nimport {\n  Drawer,\n  DrawerClose,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from \"@/components/ui/drawer\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { cn } from \"@/lib/utils\";\n\ntype BaseProps = {\n  children: React.ReactNode;\n};\n\ntype RootDropDrawerProps = BaseProps & {\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n};\n\ntype DropDrawerProps = BaseProps & {\n  className?: string;\n  asChild?: true;\n};\n\ntype DropDrawerSeparatorProps = {\n  className?: string;\n};\n\ntype DropDrawerGroupProps = BaseProps & {\n  className?: string;\n};\n\ntype DropDrawerItemProps = DropDrawerProps & {\n  onSelect?: (event: Event) => void;\n  onClick?: React.MouseEventHandler<HTMLDivElement>;\n  icon?: React.ReactNode;\n  variant?: \"default\" | \"destructive\";\n  inset?: boolean;\n  disabled?: boolean;\n};\n\nconst DropDrawerContext = React.createContext<{ isMobile: boolean }>({\n  isMobile: false,\n});\n\nconst useDropDrawerContext = () => {\n  const context = React.useContext(DropDrawerContext);\n  if (!context) {\n    throw new Error(\n      \"DropDrawer components cannot be rendered outside the DropDrawer Context\"\n    );\n  }\n  return context;\n};\n\nfunction DropDrawer({ children, ...props }: RootDropDrawerProps) {\n  const isMobile = useIsMobile();\n  const DropdownComponent = isMobile ? Drawer : DropdownMenu;\n\n  return (\n    <DropDrawerContext.Provider value={{ isMobile }}>\n      <DropdownComponent\n        data-slot=\"drop-drawer\"\n        {...(isMobile && { autoFocus: true })}\n        {...props}\n      >\n        {children}\n      </DropdownComponent>\n    </DropDrawerContext.Provider>\n  );\n}\n\nfunction DropDrawerTrigger({ className, children, ...props }: DropDrawerProps) {\n  const { isMobile } = useDropDrawerContext();\n  const TriggerComponent = isMobile ? DrawerTrigger : DropdownMenuTrigger;\n\n  return (\n    <TriggerComponent\n      data-slot=\"drop-drawer-trigger\"\n      className={className}\n      {...props}\n    >\n      {children}\n    </TriggerComponent>\n  );\n}\n\nfunction DropDrawerContent({ className, children, ...props }: DropDrawerProps) {\n  const { isMobile } = useDropDrawerContext();\n  const [activeSubmenu, setActiveSubmenu] = React.useState<string | null>(null);\n  const [submenuTitle, setSubmenuTitle] = React.useState<string | null>(null);\n  const [submenuStack, setSubmenuStack] = React.useState<\n    { id: string; title: string }[]\n  >([]);\n\n  // Function to navigate to a submenu\n  const navigateToSubmenu = React.useCallback((id: string, title: string) => {\n    setActiveSubmenu(id);\n    setSubmenuTitle(title);\n    setSubmenuStack((prev) => [...prev, { id, title }]);\n  }, []);\n\n  // Function to go back to previous menu\n  const goBack = React.useCallback(() => {\n    if (submenuStack.length <= 1) {\n      // If we're at the first level, go back to main menu\n      setActiveSubmenu(null);\n      setSubmenuTitle(null);\n      setSubmenuStack([]);\n    } else {\n      // Go back to previous submenu\n      const newStack = [...submenuStack];\n      newStack.pop(); // Remove current\n      const previous = newStack[newStack.length - 1];\n      setActiveSubmenu(previous.id);\n      setSubmenuTitle(previous.title);\n      setSubmenuStack(newStack);\n    }\n  }, [submenuStack]);\n\n  if (isMobile) {\n    return (\n      <SubmenuContext.Provider\n        value={{\n          activeSubmenu,\n          setActiveSubmenu: (id) => {\n            if (id === null) {\n              setActiveSubmenu(null);\n              setSubmenuTitle(null);\n              setSubmenuStack([]);\n            }\n          },\n          submenuTitle,\n          setSubmenuTitle,\n          navigateToSubmenu,\n        }}\n      >\n        <DrawerContent\n          data-slot=\"drop-drawer-content\"\n          className={cn(className)}\n          {...props}\n        >\n          {activeSubmenu ? (\n            <>\n              <DrawerHeader>\n                <div className=\"flex items-center gap-2\">\n                  <button\n                    onClick={goBack}\n                    className=\"hover:bg-muted/50 rounded-full p-1\"\n                  >\n                    <ChevronRightIcon className=\"h-5 w-5 rotate-180\" />\n                  </button>\n                  <DrawerTitle>{submenuTitle || \"Submenu\"}</DrawerTitle>\n                </div>\n              </DrawerHeader>\n              <div className=\"flex-1 overflow-y-auto\">\n                {/* Find and render the active submenu content */}\n                <div className=\"py-4 pb-6 space-y-1.5\">\n                  {(() => {\n                    // Function to extract submenu content\n                    const extractSubmenuContent = (\n                      elements: React.ReactNode,\n                      targetId: string\n                    ): React.ReactNode[] => {\n                      const result: React.ReactNode[] = [];\n\n                      // Helper function to process a single element\n                      const processElement = (element: React.ReactElement) => {\n                        // Check if this is a DropDrawerSub with matching ID\n                        if (\n                          element.type === DropDrawerSub &&\n                          (element.props as { id?: string }).id === targetId\n                        ) {\n                          // Find the SubContent within this Sub\n                          React.Children.forEach(\n                            (element.props as { children: React.ReactNode })\n                              .children,\n                            (subChild) => {\n                              if (\n                                React.isValidElement(subChild) &&\n                                subChild.type === DropDrawerSubContent\n                              ) {\n                                // Add all children of the SubContent to the result\n                                React.Children.forEach(\n                                  (\n                                    subChild.props as {\n                                      children: React.ReactNode;\n                                    }\n                                  ).children,\n                                  (contentChild) => {\n                                    result.push(contentChild);\n                                  }\n                                );\n                              }\n                            }\n                          );\n                          return true;\n                        }\n\n                        // Check children recursively\n                        if (element.props) {\n                          const props = element.props as {\n                            children?: React.ReactNode;\n                          };\n                          if (props.children) {\n                            React.Children.forEach(props.children, (child) => {\n                              if (React.isValidElement(child)) {\n                                processElement(child);\n                              }\n                            });\n                          }\n                        }\n\n                        return false;\n                      };\n\n                      // Process all elements\n                      React.Children.forEach(elements, (child) => {\n                        if (React.isValidElement(child)) {\n                          processElement(child);\n                        }\n                      });\n\n                      return result;\n                    };\n\n                    // Extract and render submenu content\n                    const submenuContent = extractSubmenuContent(\n                      children,\n                      activeSubmenu\n                    );\n\n                    if (submenuContent.length === 0) {\n                      return <></>;\n                    }\n\n                    return submenuContent;\n                  })()}\n                </div>\n              </div>\n            </>\n          ) : (\n            <>\n              <DrawerHeader className=\"sr-only\">\n                <DrawerTitle>Menu</DrawerTitle>\n              </DrawerHeader>\n              <div className=\"py-4 pb-6 space-y-1.5\">{children}</div>\n            </>\n          )}\n        </DrawerContent>\n      </SubmenuContext.Provider>\n    );\n  }\n\n  return (\n    <SubmenuContext.Provider\n      value={{ activeSubmenu, setActiveSubmenu, submenuTitle, setSubmenuTitle }}\n    >\n      <DropdownMenuContent\n        data-slot=\"drop-drawer-content\"\n        align=\"end\"\n        sideOffset={4}\n        className={cn(\n          \"max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[220px] overflow-y-auto\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </DropdownMenuContent>\n    </SubmenuContext.Provider>\n  );\n}\n\nfunction DropDrawerItem({\n  className,\n  children,\n  onSelect,\n  onClick,\n  icon,\n  variant = \"default\",\n  inset,\n  disabled,\n  ...props\n}: DropDrawerItemProps) {\n  const { isMobile } = useDropDrawerContext();\n\n  // Define hooks outside of conditionals to follow React rules\n  // Check if this item is inside a group by looking at parent elements\n  const isInGroup = React.useCallback(\n    (element: HTMLElement | null): boolean => {\n      if (!element) return false;\n\n      // Check if any parent has a data-drop-drawer-group attribute\n      let parent = element.parentElement;\n      while (parent) {\n        if (parent.hasAttribute(\"data-drop-drawer-group\")) {\n          return true;\n        }\n        parent = parent.parentElement;\n      }\n      return false;\n    },\n    []\n  );\n\n  // Create a ref to check if the item is in a group\n  const itemRef = React.useRef<HTMLDivElement>(null);\n  const [isInsideGroup, setIsInsideGroup] = React.useState(false);\n\n  React.useEffect(() => {\n    // Only run this effect in mobile mode\n    if (!isMobile) return;\n\n    // Use a short timeout to ensure the DOM is fully rendered\n    const timer = setTimeout(() => {\n      if (itemRef.current) {\n        setIsInsideGroup(isInGroup(itemRef.current));\n      }\n    }, 0);\n\n    return () => clearTimeout(timer);\n  }, [isInGroup, isMobile]);\n\n  if (isMobile) {\n    const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n      if (disabled) return;\n      if (onClick) onClick(e);\n      if (onSelect) onSelect(e as unknown as Event);\n    };\n\n    // Only wrap in DrawerClose if it's not a submenu item\n    const content = (\n      <div\n        ref={itemRef}\n        data-slot=\"drop-drawer-item\"\n        data-variant={variant}\n        data-inset={inset}\n        data-disabled={disabled}\n        className={cn(\n          \"flex cursor-pointer items-center justify-between px-4 py-4\",\n          // Only apply margin, background and rounded corners if not in a group\n          !isInsideGroup && \"bg-accent dark:bg-accent mx-2 my-1.5 rounded-md\",\n          // For items in a group, don't add background but add more padding\n          isInsideGroup && \"bg-transparent py-4\",\n          inset && \"pl-8\",\n          variant === \"destructive\" && \"text-destructive dark:text-destructive\",\n          disabled && \"pointer-events-none opacity-50\",\n          className\n        )}\n        onClick={handleClick}\n        aria-disabled={disabled}\n        {...props}\n      >\n        <div className=\"flex items-center gap-2\">{children}</div>\n        {icon && <div className=\"flex-shrink-0\">{icon}</div>}\n      </div>\n    );\n\n    // Check if this is inside a submenu\n    const isInSubmenu =\n      (props as Record<string, unknown>)[\"data-parent-submenu-id\"] ||\n      (props as Record<string, unknown>).parentSubmenuId;\n\n    if (isInSubmenu) {\n      return content;\n    }\n\n    return <DrawerClose asChild>{content}</DrawerClose>;\n  }\n\n  return (\n    <DropdownMenuItem\n      data-slot=\"drop-drawer-item\"\n      data-variant={variant}\n      data-inset={inset}\n      className={className}\n      onSelect={onSelect}\n      onClick={onClick as React.MouseEventHandler<HTMLDivElement>}\n      variant={variant}\n      inset={inset}\n      disabled={disabled}\n      {...props}\n    >\n      <div className=\"flex w-full items-center justify-between\">\n        <div>{children}</div>\n        {icon && <div>{icon}</div>}\n      </div>\n    </DropdownMenuItem>\n  );\n}\n\nfunction DropDrawerSeparator({\n  className,\n  ...props\n}: DropDrawerSeparatorProps) {\n  const { isMobile } = useDropDrawerContext();\n\n  // For mobile, render a simple divider\n  if (isMobile) {\n    return null;\n  }\n\n  // For desktop, use the standard dropdown separator\n  return (\n    <DropdownMenuSeparator\n      data-slot=\"drop-drawer-separator\"\n      className={className}\n      {...props}\n    />\n  );\n}\n\nfunction DropDrawerLabel({ className, children, ...props }: DropDrawerProps) {\n  const { isMobile } = useDropDrawerContext();\n\n  if (isMobile) {\n    return (\n      <DrawerHeader className=\"p-0\">\n        <DrawerTitle\n          data-slot=\"drop-drawer-label\"\n          className={cn(\n            \"text-muted-foreground px-4 py-2 text-sm font-medium\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </DrawerTitle>\n      </DrawerHeader>\n    );\n  }\n\n  return (\n    <DropdownMenuLabel\n      data-slot=\"drop-drawer-label\"\n      className={className}\n      {...props}\n    >\n      {children}\n    </DropdownMenuLabel>\n  );\n}\n\nfunction DropDrawerFooter({ className, children, ...props }: DropDrawerProps) {\n  const { isMobile } = useDropDrawerContext();\n\n  if (isMobile) {\n    return (\n      <DrawerFooter\n        data-slot=\"drop-drawer-footer\"\n        className={cn(\"p-4\", className)}\n        {...props}\n      >\n        {children}\n      </DrawerFooter>\n    );\n  }\n\n  // No direct equivalent in DropdownMenu, so we'll just render a div\n  return (\n    <div\n      data-slot=\"drop-drawer-footer\"\n      className={cn(\"p-2\", className)}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n\nfunction DropDrawerGroup({\n  className,\n  children,\n  ...props\n}: DropDrawerGroupProps) {\n  const { isMobile } = useDropDrawerContext();\n\n  // Add separators between children on mobile\n  const childrenWithSeparators = React.useMemo(() => {\n    if (!isMobile) return children;\n\n    const childArray = React.Children.toArray(children);\n\n    // Filter out any existing separators\n    const filteredChildren = childArray.filter(\n      (child) =>\n        React.isValidElement(child) && child.type !== DropDrawerSeparator\n    );\n\n    // Add separators between items\n    return filteredChildren.flatMap((child, index) => {\n      if (index === filteredChildren.length - 1) return [child];\n      return [\n        child,\n        <div\n          key={`separator-${index}`}\n          className=\"bg-border dark:bg-muted h-px\"\n          aria-hidden=\"true\"\n        />,\n      ];\n    });\n  }, [children, isMobile]);\n\n  if (isMobile) {\n    return (\n      <div\n        data-drop-drawer-group\n        data-slot=\"drop-drawer-group\"\n        role=\"group\"\n        className={cn(\n          \"bg-accent dark:bg-accent mx-2 my-3 overflow-hidden rounded-xl\",\n          className\n        )}\n        {...props}\n      >\n        {childrenWithSeparators}\n      </div>\n    );\n  }\n\n  // On desktop, use a div with proper role and attributes\n  return (\n    <div\n      data-drop-drawer-group\n      data-slot=\"drop-drawer-group\"\n      role=\"group\"\n      className={className}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n\n// Context for managing submenu state on mobile\ninterface SubmenuContextType {\n  activeSubmenu: string | null;\n  setActiveSubmenu: (id: string | null) => void;\n  submenuTitle: string | null;\n  setSubmenuTitle: (title: string | null) => void;\n  navigateToSubmenu?: (id: string, title: string) => void;\n}\n\nconst SubmenuContext = React.createContext<SubmenuContextType>({\n  activeSubmenu: null,\n  setActiveSubmenu: () => {},\n  submenuTitle: null,\n  setSubmenuTitle: () => {},\n  navigateToSubmenu: undefined,\n});\n\n// Submenu components\nfunction DropDrawerSub({\n  children,\n  id,\n  ...props\n}: {\n  children: React.ReactNode;\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  id?: string;\n}) {\n  const { isMobile } = useDropDrawerContext();\n  // Generate ID outside of conditionals\n  const generatedId = React.useId();\n  const submenuId = id || generatedId;\n\n  if (isMobile) {\n    // For mobile, we'll use the context to manage submenu state\n    // Process children to pass the submenu ID to the trigger and content\n    const processedChildren = React.Children.map(children, (child) => {\n      if (!React.isValidElement(child)) return child;\n\n      if (child.type === DropDrawerSubTrigger) {\n        return React.cloneElement(\n          child as React.ReactElement,\n          {\n            ...(child.props as object),\n            \"data-parent-submenu-id\": submenuId,\n            \"data-submenu-id\": submenuId,\n            parentSubmenuId: submenuId,\n          } as React.HTMLAttributes<HTMLElement>\n        );\n      }\n\n      if (child.type === DropDrawerSubContent) {\n        return React.cloneElement(\n          child as React.ReactElement,\n          {\n            ...(child.props as object),\n            \"data-parent-submenu-id\": submenuId,\n            \"data-submenu-id\": submenuId,\n            parentSubmenuId: submenuId,\n          } as React.HTMLAttributes<HTMLElement>\n        );\n      }\n\n      return child;\n    });\n\n    return (\n      <div\n        data-slot=\"drop-drawer-sub\"\n        data-submenu-id={submenuId}\n        id={submenuId}\n      >\n        {processedChildren}\n      </div>\n    );\n  }\n\n  return (\n    <DropdownMenuSub data-slot=\"drop-drawer-sub\" {...props}>\n      {children}\n    </DropdownMenuSub>\n  );\n}\n\nfunction DropDrawerSubTrigger({\n  className,\n  inset,\n  children,\n  icon, // Kept for backward compatibility but not used\n  ...props\n}: DropDrawerProps & { inset?: boolean; icon?: React.ReactNode }) {\n  const { isMobile } = useDropDrawerContext();\n  const { navigateToSubmenu } = React.useContext(SubmenuContext);\n\n  // Define hooks outside of conditionals to follow React rules\n  // Check if this item is inside a group by looking at parent elements\n  const isInGroup = React.useCallback(\n    (element: HTMLElement | null): boolean => {\n      if (!element) return false;\n\n      // Check if any parent has a data-drop-drawer-group attribute\n      let parent = element.parentElement;\n      while (parent) {\n        if (parent.hasAttribute(\"data-drop-drawer-group\")) {\n          return true;\n        }\n        parent = parent.parentElement;\n      }\n      return false;\n    },\n    []\n  );\n\n  // Create a ref to check if the item is in a group\n  const itemRef = React.useRef<HTMLDivElement>(null);\n  const [isInsideGroup, setIsInsideGroup] = React.useState(false);\n\n  React.useEffect(() => {\n    // Only run this effect in mobile mode\n    if (!isMobile) return;\n\n    // Use a short timeout to ensure the DOM is fully rendered\n    const timer = setTimeout(() => {\n      if (itemRef.current) {\n        setIsInsideGroup(isInGroup(itemRef.current));\n      }\n    }, 0);\n\n    return () => clearTimeout(timer);\n  }, [isInGroup, isMobile]);\n\n  if (isMobile) {\n    // Find the parent submenu ID\n    const handleClick = (e: React.MouseEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      // Get the closest parent with data-submenu-id attribute\n      const element = e.currentTarget as HTMLElement;\n      let submenuId: string | null = null;\n\n      // First check if the element itself has the data attribute\n      if (element.closest(\"[data-submenu-id]\")) {\n        const closestElement = element.closest(\"[data-submenu-id]\");\n        const id = closestElement?.getAttribute(\"data-submenu-id\");\n        if (id) {\n          submenuId = id;\n        }\n      }\n\n      // If not found, try props\n      if (!submenuId) {\n        submenuId =\n          ((props as Record<string, unknown>)[\n            \"data-parent-submenu-id\"\n          ] as string) ||\n          ((props as Record<string, unknown>).parentSubmenuId as string);\n      }\n\n      if (!submenuId) {\n        return;\n      }\n\n      // Get the title\n      const title = typeof children === \"string\" ? children : \"Submenu\";\n\n      // Navigate to the submenu\n      if (navigateToSubmenu) {\n        navigateToSubmenu(submenuId, title);\n      }\n    };\n\n    // Combine onClick handlers\n    const combinedOnClick = (e: React.MouseEvent) => {\n      // Call the original onClick if provided\n      const typedProps = props as Record<string, unknown>;\n      if (typedProps.onClick) {\n        const originalOnClick =\n          typedProps.onClick as React.MouseEventHandler<HTMLDivElement>;\n        originalOnClick(e as React.MouseEvent<HTMLDivElement>);\n      }\n\n      // Call our navigation handler\n      handleClick(e);\n    };\n\n    // Remove onClick from props to avoid duplicate handlers\n    const { ...restProps } = props as Record<string, unknown>;\n\n    // Don't wrap in DrawerClose for submenu triggers\n    return (\n      <div\n        ref={itemRef}\n        data-slot=\"drop-drawer-sub-trigger\"\n        data-inset={inset}\n        className={cn(\n          \"flex cursor-pointer items-center justify-between px-4 py-4\",\n          // Only apply margin, background and rounded corners if not in a group\n          !isInsideGroup && \"bg-accent dark:bg-accent mx-2 my-1.5 rounded-md\",\n          // For items in a group, don't add background but add more padding\n          isInsideGroup && \"bg-transparent py-4\",\n          inset && \"pl-8\",\n          className\n        )}\n        onClick={combinedOnClick}\n        {...restProps}\n      >\n        <div className=\"flex items-center gap-2\">{children}</div>\n        <ChevronRightIcon className=\"h-5 w-5\" />\n      </div>\n    );\n  }\n\n  return (\n    <DropdownMenuSubTrigger\n      data-slot=\"drop-drawer-sub-trigger\"\n      data-inset={inset}\n      className={className}\n      inset={inset}\n      {...props}\n    >\n      {children}\n    </DropdownMenuSubTrigger>\n  );\n}\n\nfunction DropDrawerSubContent({\n  className,\n  sideOffset = 4,\n  children,\n  ...props\n}: DropDrawerProps & { sideOffset?: number }) {\n  const { isMobile } = useDropDrawerContext();\n\n  if (isMobile) {\n    // For mobile, we don't render the content directly\n    // It will be rendered by the DropDrawerContent component when active\n    return null;\n  }\n\n  return (\n    <DropdownMenuSubContent\n      data-slot=\"drop-drawer-sub-content\"\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </DropdownMenuSubContent>\n  );\n}\n\nexport {\n  DropDrawer,\n  DropDrawerContent,\n  DropDrawerFooter,\n  DropDrawerGroup,\n  DropDrawerItem,\n  DropDrawerLabel,\n  DropDrawerSeparator,\n  DropDrawerSub,\n  DropDrawerSubContent,\n  DropDrawerSubTrigger,\n  DropDrawerTrigger,\n};\n",
      "type": "registry:component"
    },
    {
      "path": "components\\ui\\dropdrawer.tsx",
      "content": "\"use client\";\n\nimport { ChevronRightIcon } from \"lucide-react\";\nimport * as React from \"react\";\n\nimport {\n  Drawer,\n  DrawerClose,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from \"@/components/ui/drawer\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { cn } from \"@/lib/utils\";\n\ntype BaseProps = {\n  children: React.ReactNode;\n};\n\ntype RootDropDrawerProps = BaseProps & {\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n};\n\ntype DropDrawerProps = BaseProps & {\n  className?: string;\n  asChild?: true;\n};\n\ntype DropDrawerSeparatorProps = {\n  className?: string;\n};\n\ntype DropDrawerGroupProps = BaseProps & {\n  className?: string;\n};\n\ntype DropDrawerItemProps = DropDrawerProps & {\n  onSelect?: (event: Event) => void;\n  onClick?: React.MouseEventHandler<HTMLDivElement>;\n  icon?: React.ReactNode;\n  variant?: \"default\" | \"destructive\";\n  inset?: boolean;\n  disabled?: boolean;\n};\n\nconst DropDrawerContext = React.createContext<{ isMobile: boolean }>({\n  isMobile: false,\n});\n\nconst useDropDrawerContext = () => {\n  const context = React.useContext(DropDrawerContext);\n  if (!context) {\n    throw new Error(\n      \"DropDrawer components cannot be rendered outside the DropDrawer Context\"\n    );\n  }\n  return context;\n};\n\nfunction DropDrawer({ children, ...props }: RootDropDrawerProps) {\n  const isMobile = useIsMobile();\n  const DropdownComponent = isMobile ? Drawer : DropdownMenu;\n\n  return (\n    <DropDrawerContext.Provider value={{ isMobile }}>\n      <DropdownComponent\n        data-slot=\"drop-drawer\"\n        {...(isMobile && { autoFocus: true })}\n        {...props}\n      >\n        {children}\n      </DropdownComponent>\n    </DropDrawerContext.Provider>\n  );\n}\n\nfunction DropDrawerTrigger({ className, children, ...props }: DropDrawerProps) {\n  const { isMobile } = useDropDrawerContext();\n  const TriggerComponent = isMobile ? DrawerTrigger : DropdownMenuTrigger;\n\n  return (\n    <TriggerComponent\n      data-slot=\"drop-drawer-trigger\"\n      className={className}\n      {...props}\n    >\n      {children}\n    </TriggerComponent>\n  );\n}\n\nfunction DropDrawerContent({ className, children, ...props }: DropDrawerProps) {\n  const { isMobile } = useDropDrawerContext();\n  const [activeSubmenu, setActiveSubmenu] = React.useState<string | null>(null);\n  const [submenuTitle, setSubmenuTitle] = React.useState<string | null>(null);\n  const [submenuStack, setSubmenuStack] = React.useState<\n    { id: string; title: string }[]\n  >([]);\n\n  // Function to navigate to a submenu\n  const navigateToSubmenu = React.useCallback((id: string, title: string) => {\n    setActiveSubmenu(id);\n    setSubmenuTitle(title);\n    setSubmenuStack((prev) => [...prev, { id, title }]);\n  }, []);\n\n  // Function to go back to previous menu\n  const goBack = React.useCallback(() => {\n    if (submenuStack.length <= 1) {\n      // If we're at the first level, go back to main menu\n      setActiveSubmenu(null);\n      setSubmenuTitle(null);\n      setSubmenuStack([]);\n    } else {\n      // Go back to previous submenu\n      const newStack = [...submenuStack];\n      newStack.pop(); // Remove current\n      const previous = newStack[newStack.length - 1];\n      setActiveSubmenu(previous.id);\n      setSubmenuTitle(previous.title);\n      setSubmenuStack(newStack);\n    }\n  }, [submenuStack]);\n\n  if (isMobile) {\n    return (\n      <SubmenuContext.Provider\n        value={{\n          activeSubmenu,\n          setActiveSubmenu: (id) => {\n            if (id === null) {\n              setActiveSubmenu(null);\n              setSubmenuTitle(null);\n              setSubmenuStack([]);\n            }\n          },\n          submenuTitle,\n          setSubmenuTitle,\n          navigateToSubmenu,\n        }}\n      >\n        <DrawerContent\n          data-slot=\"drop-drawer-content\"\n          className={cn(className)}\n          {...props}\n        >\n          {activeSubmenu ? (\n            <>\n              <DrawerHeader>\n                <div className=\"flex items-center gap-2\">\n                  <button\n                    onClick={goBack}\n                    className=\"hover:bg-muted/50 rounded-full p-1\"\n                  >\n                    <ChevronRightIcon className=\"h-5 w-5 rotate-180\" />\n                  </button>\n                  <DrawerTitle>{submenuTitle || \"Submenu\"}</DrawerTitle>\n                </div>\n              </DrawerHeader>\n              <div className=\"flex-1 overflow-y-auto\">\n                {/* Find and render the active submenu content */}\n                <div className=\"py-4 pb-6 space-y-1.5\">\n                  {(() => {\n                    // Function to extract submenu content\n                    const extractSubmenuContent = (\n                      elements: React.ReactNode,\n                      targetId: string\n                    ): React.ReactNode[] => {\n                      const result: React.ReactNode[] = [];\n\n                      // Helper function to process a single element\n                      const processElement = (element: React.ReactElement) => {\n                        // Check if this is a DropDrawerSub with matching ID\n                        if (\n                          element.type === DropDrawerSub &&\n                          (element.props as { id?: string }).id === targetId\n                        ) {\n                          // Find the SubContent within this Sub\n                          React.Children.forEach(\n                            (element.props as { children: React.ReactNode })\n                              .children,\n                            (subChild) => {\n                              if (\n                                React.isValidElement(subChild) &&\n                                subChild.type === DropDrawerSubContent\n                              ) {\n                                // Add all children of the SubContent to the result\n                                React.Children.forEach(\n                                  (\n                                    subChild.props as {\n                                      children: React.ReactNode;\n                                    }\n                                  ).children,\n                                  (contentChild) => {\n                                    result.push(contentChild);\n                                  }\n                                );\n                              }\n                            }\n                          );\n                          return true;\n                        }\n\n                        // Check children recursively\n                        if (element.props) {\n                          const props = element.props as {\n                            children?: React.ReactNode;\n                          };\n                          if (props.children) {\n                            React.Children.forEach(props.children, (child) => {\n                              if (React.isValidElement(child)) {\n                                processElement(child);\n                              }\n                            });\n                          }\n                        }\n\n                        return false;\n                      };\n\n                      // Process all elements\n                      React.Children.forEach(elements, (child) => {\n                        if (React.isValidElement(child)) {\n                          processElement(child);\n                        }\n                      });\n\n                      return result;\n                    };\n\n                    // Extract and render submenu content\n                    const submenuContent = extractSubmenuContent(\n                      children,\n                      activeSubmenu\n                    );\n\n                    if (submenuContent.length === 0) {\n                      return <></>;\n                    }\n\n                    return submenuContent;\n                  })()}\n                </div>\n              </div>\n            </>\n          ) : (\n            <>\n              <DrawerHeader className=\"sr-only\">\n                <DrawerTitle>Menu</DrawerTitle>\n              </DrawerHeader>\n              <div className=\"py-4 pb-6 space-y-1.5\">{children}</div>\n            </>\n          )}\n        </DrawerContent>\n      </SubmenuContext.Provider>\n    );\n  }\n\n  return (\n    <SubmenuContext.Provider\n      value={{ activeSubmenu, setActiveSubmenu, submenuTitle, setSubmenuTitle }}\n    >\n      <DropdownMenuContent\n        data-slot=\"drop-drawer-content\"\n        align=\"end\"\n        sideOffset={4}\n        className={cn(\n          \"max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[220px] overflow-y-auto\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </DropdownMenuContent>\n    </SubmenuContext.Provider>\n  );\n}\n\nfunction DropDrawerItem({\n  className,\n  children,\n  onSelect,\n  onClick,\n  icon,\n  variant = \"default\",\n  inset,\n  disabled,\n  ...props\n}: DropDrawerItemProps) {\n  const { isMobile } = useDropDrawerContext();\n\n  // Define hooks outside of conditionals to follow React rules\n  // Check if this item is inside a group by looking at parent elements\n  const isInGroup = React.useCallback(\n    (element: HTMLElement | null): boolean => {\n      if (!element) return false;\n\n      // Check if any parent has a data-drop-drawer-group attribute\n      let parent = element.parentElement;\n      while (parent) {\n        if (parent.hasAttribute(\"data-drop-drawer-group\")) {\n          return true;\n        }\n        parent = parent.parentElement;\n      }\n      return false;\n    },\n    []\n  );\n\n  // Create a ref to check if the item is in a group\n  const itemRef = React.useRef<HTMLDivElement>(null);\n  const [isInsideGroup, setIsInsideGroup] = React.useState(false);\n\n  React.useEffect(() => {\n    // Only run this effect in mobile mode\n    if (!isMobile) return;\n\n    // Use a short timeout to ensure the DOM is fully rendered\n    const timer = setTimeout(() => {\n      if (itemRef.current) {\n        setIsInsideGroup(isInGroup(itemRef.current));\n      }\n    }, 0);\n\n    return () => clearTimeout(timer);\n  }, [isInGroup, isMobile]);\n\n  if (isMobile) {\n    const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n      if (disabled) return;\n      if (onClick) onClick(e);\n      if (onSelect) onSelect(e as unknown as Event);\n    };\n\n    // Only wrap in DrawerClose if it's not a submenu item\n    const content = (\n      <div\n        ref={itemRef}\n        data-slot=\"drop-drawer-item\"\n        data-variant={variant}\n        data-inset={inset}\n        data-disabled={disabled}\n        className={cn(\n          \"flex cursor-pointer items-center justify-between px-4 py-4\",\n          // Only apply margin, background and rounded corners if not in a group\n          !isInsideGroup && \"bg-accent dark:bg-accent mx-2 my-1.5 rounded-md\",\n          // For items in a group, don't add background but add more padding\n          isInsideGroup && \"bg-transparent py-4\",\n          inset && \"pl-8\",\n          variant === \"destructive\" && \"text-destructive dark:text-destructive\",\n          disabled && \"pointer-events-none opacity-50\",\n          className\n        )}\n        onClick={handleClick}\n        aria-disabled={disabled}\n        {...props}\n      >\n        <div className=\"flex items-center gap-2\">{children}</div>\n        {icon && <div className=\"flex-shrink-0\">{icon}</div>}\n      </div>\n    );\n\n    // Check if this is inside a submenu\n    const isInSubmenu =\n      (props as Record<string, unknown>)[\"data-parent-submenu-id\"] ||\n      (props as Record<string, unknown>).parentSubmenuId;\n\n    if (isInSubmenu) {\n      return content;\n    }\n\n    return <DrawerClose asChild>{content}</DrawerClose>;\n  }\n\n  return (\n    <DropdownMenuItem\n      data-slot=\"drop-drawer-item\"\n      data-variant={variant}\n      data-inset={inset}\n      className={className}\n      onSelect={onSelect}\n      onClick={onClick as React.MouseEventHandler<HTMLDivElement>}\n      variant={variant}\n      inset={inset}\n      disabled={disabled}\n      {...props}\n    >\n      <div className=\"flex w-full items-center justify-between\">\n        <div>{children}</div>\n        {icon && <div>{icon}</div>}\n      </div>\n    </DropdownMenuItem>\n  );\n}\n\nfunction DropDrawerSeparator({\n  className,\n  ...props\n}: DropDrawerSeparatorProps) {\n  const { isMobile } = useDropDrawerContext();\n\n  // For mobile, render a simple divider\n  if (isMobile) {\n    return null;\n  }\n\n  // For desktop, use the standard dropdown separator\n  return (\n    <DropdownMenuSeparator\n      data-slot=\"drop-drawer-separator\"\n      className={className}\n      {...props}\n    />\n  );\n}\n\nfunction DropDrawerLabel({ className, children, ...props }: DropDrawerProps) {\n  const { isMobile } = useDropDrawerContext();\n\n  if (isMobile) {\n    return (\n      <DrawerHeader className=\"p-0\">\n        <DrawerTitle\n          data-slot=\"drop-drawer-label\"\n          className={cn(\n            \"text-muted-foreground px-4 py-2 text-sm font-medium\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </DrawerTitle>\n      </DrawerHeader>\n    );\n  }\n\n  return (\n    <DropdownMenuLabel\n      data-slot=\"drop-drawer-label\"\n      className={className}\n      {...props}\n    >\n      {children}\n    </DropdownMenuLabel>\n  );\n}\n\nfunction DropDrawerFooter({ className, children, ...props }: DropDrawerProps) {\n  const { isMobile } = useDropDrawerContext();\n\n  if (isMobile) {\n    return (\n      <DrawerFooter\n        data-slot=\"drop-drawer-footer\"\n        className={cn(\"p-4\", className)}\n        {...props}\n      >\n        {children}\n      </DrawerFooter>\n    );\n  }\n\n  // No direct equivalent in DropdownMenu, so we'll just render a div\n  return (\n    <div\n      data-slot=\"drop-drawer-footer\"\n      className={cn(\"p-2\", className)}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n\nfunction DropDrawerGroup({\n  className,\n  children,\n  ...props\n}: DropDrawerGroupProps) {\n  const { isMobile } = useDropDrawerContext();\n\n  // Add separators between children on mobile\n  const childrenWithSeparators = React.useMemo(() => {\n    if (!isMobile) return children;\n\n    const childArray = React.Children.toArray(children);\n\n    // Filter out any existing separators\n    const filteredChildren = childArray.filter(\n      (child) =>\n        React.isValidElement(child) && child.type !== DropDrawerSeparator\n    );\n\n    // Add separators between items\n    return filteredChildren.flatMap((child, index) => {\n      if (index === filteredChildren.length - 1) return [child];\n      return [\n        child,\n        <div\n          key={`separator-${index}`}\n          className=\"bg-border dark:bg-muted h-px\"\n          aria-hidden=\"true\"\n        />,\n      ];\n    });\n  }, [children, isMobile]);\n\n  if (isMobile) {\n    return (\n      <div\n        data-drop-drawer-group\n        data-slot=\"drop-drawer-group\"\n        role=\"group\"\n        className={cn(\n          \"bg-accent dark:bg-accent mx-2 my-3 overflow-hidden rounded-xl\",\n          className\n        )}\n        {...props}\n      >\n        {childrenWithSeparators}\n      </div>\n    );\n  }\n\n  // On desktop, use a div with proper role and attributes\n  return (\n    <div\n      data-drop-drawer-group\n      data-slot=\"drop-drawer-group\"\n      role=\"group\"\n      className={className}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n\n// Context for managing submenu state on mobile\ninterface SubmenuContextType {\n  activeSubmenu: string | null;\n  setActiveSubmenu: (id: string | null) => void;\n  submenuTitle: string | null;\n  setSubmenuTitle: (title: string | null) => void;\n  navigateToSubmenu?: (id: string, title: string) => void;\n}\n\nconst SubmenuContext = React.createContext<SubmenuContextType>({\n  activeSubmenu: null,\n  setActiveSubmenu: () => {},\n  submenuTitle: null,\n  setSubmenuTitle: () => {},\n  navigateToSubmenu: undefined,\n});\n\n// Submenu components\nfunction DropDrawerSub({\n  children,\n  id,\n  ...props\n}: {\n  children: React.ReactNode;\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  id?: string;\n}) {\n  const { isMobile } = useDropDrawerContext();\n  // Generate ID outside of conditionals\n  const generatedId = React.useId();\n  const submenuId = id || generatedId;\n\n  if (isMobile) {\n    // For mobile, we'll use the context to manage submenu state\n    // Process children to pass the submenu ID to the trigger and content\n    const processedChildren = React.Children.map(children, (child) => {\n      if (!React.isValidElement(child)) return child;\n\n      if (child.type === DropDrawerSubTrigger) {\n        return React.cloneElement(\n          child as React.ReactElement,\n          {\n            ...(child.props as object),\n            \"data-parent-submenu-id\": submenuId,\n            \"data-submenu-id\": submenuId,\n            parentSubmenuId: submenuId,\n          } as React.HTMLAttributes<HTMLElement>\n        );\n      }\n\n      if (child.type === DropDrawerSubContent) {\n        return React.cloneElement(\n          child as React.ReactElement,\n          {\n            ...(child.props as object),\n            \"data-parent-submenu-id\": submenuId,\n            \"data-submenu-id\": submenuId,\n            parentSubmenuId: submenuId,\n          } as React.HTMLAttributes<HTMLElement>\n        );\n      }\n\n      return child;\n    });\n\n    return (\n      <div\n        data-slot=\"drop-drawer-sub\"\n        data-submenu-id={submenuId}\n        id={submenuId}\n      >\n        {processedChildren}\n      </div>\n    );\n  }\n\n  return (\n    <DropdownMenuSub data-slot=\"drop-drawer-sub\" {...props}>\n      {children}\n    </DropdownMenuSub>\n  );\n}\n\nfunction DropDrawerSubTrigger({\n  className,\n  inset,\n  children,\n  icon, // Kept for backward compatibility but not used\n  ...props\n}: DropDrawerProps & { inset?: boolean; icon?: React.ReactNode }) {\n  const { isMobile } = useDropDrawerContext();\n  const { navigateToSubmenu } = React.useContext(SubmenuContext);\n\n  // Define hooks outside of conditionals to follow React rules\n  // Check if this item is inside a group by looking at parent elements\n  const isInGroup = React.useCallback(\n    (element: HTMLElement | null): boolean => {\n      if (!element) return false;\n\n      // Check if any parent has a data-drop-drawer-group attribute\n      let parent = element.parentElement;\n      while (parent) {\n        if (parent.hasAttribute(\"data-drop-drawer-group\")) {\n          return true;\n        }\n        parent = parent.parentElement;\n      }\n      return false;\n    },\n    []\n  );\n\n  // Create a ref to check if the item is in a group\n  const itemRef = React.useRef<HTMLDivElement>(null);\n  const [isInsideGroup, setIsInsideGroup] = React.useState(false);\n\n  React.useEffect(() => {\n    // Only run this effect in mobile mode\n    if (!isMobile) return;\n\n    // Use a short timeout to ensure the DOM is fully rendered\n    const timer = setTimeout(() => {\n      if (itemRef.current) {\n        setIsInsideGroup(isInGroup(itemRef.current));\n      }\n    }, 0);\n\n    return () => clearTimeout(timer);\n  }, [isInGroup, isMobile]);\n\n  if (isMobile) {\n    // Find the parent submenu ID\n    const handleClick = (e: React.MouseEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      // Get the closest parent with data-submenu-id attribute\n      const element = e.currentTarget as HTMLElement;\n      let submenuId: string | null = null;\n\n      // First check if the element itself has the data attribute\n      if (element.closest(\"[data-submenu-id]\")) {\n        const closestElement = element.closest(\"[data-submenu-id]\");\n        const id = closestElement?.getAttribute(\"data-submenu-id\");\n        if (id) {\n          submenuId = id;\n        }\n      }\n\n      // If not found, try props\n      if (!submenuId) {\n        submenuId =\n          ((props as Record<string, unknown>)[\n            \"data-parent-submenu-id\"\n          ] as string) ||\n          ((props as Record<string, unknown>).parentSubmenuId as string);\n      }\n\n      if (!submenuId) {\n        return;\n      }\n\n      // Get the title\n      const title = typeof children === \"string\" ? children : \"Submenu\";\n\n      // Navigate to the submenu\n      if (navigateToSubmenu) {\n        navigateToSubmenu(submenuId, title);\n      }\n    };\n\n    // Combine onClick handlers\n    const combinedOnClick = (e: React.MouseEvent) => {\n      // Call the original onClick if provided\n      const typedProps = props as Record<string, unknown>;\n      if (typedProps.onClick) {\n        const originalOnClick =\n          typedProps.onClick as React.MouseEventHandler<HTMLDivElement>;\n        originalOnClick(e as React.MouseEvent<HTMLDivElement>);\n      }\n\n      // Call our navigation handler\n      handleClick(e);\n    };\n\n    // Remove onClick from props to avoid duplicate handlers\n    const { ...restProps } = props as Record<string, unknown>;\n\n    // Don't wrap in DrawerClose for submenu triggers\n    return (\n      <div\n        ref={itemRef}\n        data-slot=\"drop-drawer-sub-trigger\"\n        data-inset={inset}\n        className={cn(\n          \"flex cursor-pointer items-center justify-between px-4 py-4\",\n          // Only apply margin, background and rounded corners if not in a group\n          !isInsideGroup && \"bg-accent dark:bg-accent mx-2 my-1.5 rounded-md\",\n          // For items in a group, don't add background but add more padding\n          isInsideGroup && \"bg-transparent py-4\",\n          inset && \"pl-8\",\n          className\n        )}\n        onClick={combinedOnClick}\n        {...restProps}\n      >\n        <div className=\"flex items-center gap-2\">{children}</div>\n        <ChevronRightIcon className=\"h-5 w-5\" />\n      </div>\n    );\n  }\n\n  return (\n    <DropdownMenuSubTrigger\n      data-slot=\"drop-drawer-sub-trigger\"\n      data-inset={inset}\n      className={className}\n      inset={inset}\n      {...props}\n    >\n      {children}\n    </DropdownMenuSubTrigger>\n  );\n}\n\nfunction DropDrawerSubContent({\n  className,\n  sideOffset = 4,\n  children,\n  ...props\n}: DropDrawerProps & { sideOffset?: number }) {\n  const { isMobile } = useDropDrawerContext();\n\n  if (isMobile) {\n    // For mobile, we don't render the content directly\n    // It will be rendered by the DropDrawerContent component when active\n    return null;\n  }\n\n  return (\n    <DropdownMenuSubContent\n      data-slot=\"drop-drawer-sub-content\"\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </DropdownMenuSubContent>\n  );\n}\n\nexport {\n  DropDrawer,\n  DropDrawerContent,\n  DropDrawerFooter,\n  DropDrawerGroup,\n  DropDrawerItem,\n  DropDrawerLabel,\n  DropDrawerSeparator,\n  DropDrawerSub,\n  DropDrawerSubContent,\n  DropDrawerSubTrigger,\n  DropDrawerTrigger,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\drawer.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Drawer({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) {\n  return <DrawerPrimitive.Root data-slot=\"drawer\" {...props} />\n}\n\nfunction DrawerTrigger({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Trigger>) {\n  return <DrawerPrimitive.Trigger data-slot=\"drawer-trigger\" {...props} />\n}\n\nfunction DrawerPortal({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Portal>) {\n  return <DrawerPrimitive.Portal data-slot=\"drawer-portal\" {...props} />\n}\n\nfunction DrawerClose({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Close>) {\n  return <DrawerPrimitive.Close data-slot=\"drawer-close\" {...props} />\n}\n\nfunction DrawerOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Overlay>) {\n  return (\n    <DrawerPrimitive.Overlay\n      data-slot=\"drawer-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Content>) {\n  return (\n    <DrawerPortal data-slot=\"drawer-portal\">\n      <DrawerOverlay />\n      <DrawerPrimitive.Content\n        data-slot=\"drawer-content\"\n        className={cn(\n          \"group/drawer-content bg-background fixed z-50 flex h-auto flex-col\",\n          \"data-[vaul-drawer-direction=top]:inset-x-0 data-[vaul-drawer-direction=top]:top-0 data-[vaul-drawer-direction=top]:mb-24 data-[vaul-drawer-direction=top]:max-h-[80vh] data-[vaul-drawer-direction=top]:rounded-b-lg data-[vaul-drawer-direction=top]:border-b\",\n          \"data-[vaul-drawer-direction=bottom]:inset-x-0 data-[vaul-drawer-direction=bottom]:bottom-0 data-[vaul-drawer-direction=bottom]:mt-24 data-[vaul-drawer-direction=bottom]:max-h-[80vh] data-[vaul-drawer-direction=bottom]:rounded-t-lg data-[vaul-drawer-direction=bottom]:border-t\",\n          \"data-[vaul-drawer-direction=right]:inset-y-0 data-[vaul-drawer-direction=right]:right-0 data-[vaul-drawer-direction=right]:w-3/4 data-[vaul-drawer-direction=right]:border-l data-[vaul-drawer-direction=right]:sm:max-w-sm\",\n          \"data-[vaul-drawer-direction=left]:inset-y-0 data-[vaul-drawer-direction=left]:left-0 data-[vaul-drawer-direction=left]:w-3/4 data-[vaul-drawer-direction=left]:border-r data-[vaul-drawer-direction=left]:sm:max-w-sm\",\n          className\n        )}\n        {...props}\n      >\n        <div className=\"bg-muted mx-auto mt-4 hidden h-2 w-[100px] shrink-0 rounded-full group-data-[vaul-drawer-direction=bottom]/drawer-content:block\" />\n        {children}\n      </DrawerPrimitive.Content>\n    </DrawerPortal>\n  )\n}\n\nfunction DrawerHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"drawer-header\"\n      className={cn(\"flex flex-col gap-1.5 p-4\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"drawer-footer\"\n      className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Title>) {\n  return (\n    <DrawerPrimitive.Title\n      data-slot=\"drawer-title\"\n      className={cn(\"text-foreground font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Description>) {\n  return (\n    <DrawerPrimitive.Description\n      data-slot=\"drawer-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "lib\\utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\r\nimport { twMerge } from \"tailwind-merge\"\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs))\r\n}\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "components\\ui\\dropdown-menu.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}\n\nfunction DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  )\n}\n\nfunction DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md\",\n          className\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  )\n}\n\nfunction DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  )\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: \"default\" | \"destructive\"\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  )\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        \"px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto size-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuPortal,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "hooks\\use-mobile.ts",
      "content": "import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}