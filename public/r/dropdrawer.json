{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dropdrawer",
  "type": "registry:component",
  "title": "DropDrawer",
  "description": "A responsive component that automatically switches between a dropdown menu on desktop and a drawer on mobile devices for shadcn/ui.",
  "dependencies": [
    "framer-motion",
    "framer-motion",
    "lucide-react",
    "vaul",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-dropdown-menu"
  ],
  "registryDependencies": [
    "dropdown-menu",
    "drawer",
    "use-mobile"
  ],
  "files": [
    {
      "path": "components/ui/dropdrawer.tsx",
      "content": "\"use client\";\r\n\r\nimport { AnimatePresence, motion } from \"framer-motion\";\r\nimport { ChevronLeftIcon, ChevronRightIcon } from \"lucide-react\";\r\nimport * as React from \"react\";\r\n\r\nimport {\r\n  Drawer,\r\n  DrawerClose,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerTitle,\r\n  DrawerTrigger,\r\n} from \"@/components/ui/drawer\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuSub,\r\n  DropdownMenuSubContent,\r\n  DropdownMenuSubTrigger,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport { useIsMobile } from \"@/hooks/use-mobile\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst DropDrawerContext = React.createContext<{ isMobile: boolean }>({\r\n  isMobile: false,\r\n});\r\n\r\nconst useDropDrawerContext = () => {\r\n  const context = React.useContext(DropDrawerContext);\r\n  if (!context) {\r\n    throw new Error(\r\n      \"DropDrawer components cannot be rendered outside the DropDrawer Context\"\r\n    );\r\n  }\r\n  return context;\r\n};\r\n\r\nfunction DropDrawer({\r\n  children,\r\n  ...props\r\n}:\r\n  | React.ComponentProps<typeof Drawer>\r\n  | React.ComponentProps<typeof DropdownMenu>) {\r\n  const isMobile = useIsMobile();\r\n  const DropdownComponent = isMobile ? Drawer : DropdownMenu;\r\n\r\n  return (\r\n    <DropDrawerContext.Provider value={{ isMobile }}>\r\n      <DropdownComponent\r\n        data-slot=\"drop-drawer\"\r\n        {...(isMobile && { autoFocus: true })}\r\n        {...props}\r\n      >\r\n        {children}\r\n      </DropdownComponent>\r\n    </DropDrawerContext.Provider>\r\n  );\r\n}\r\n\r\nfunction DropDrawerTrigger({\r\n  className,\r\n  children,\r\n  ...props\r\n}:\r\n  | React.ComponentProps<typeof DrawerTrigger>\r\n  | React.ComponentProps<typeof DropdownMenuTrigger>) {\r\n  const { isMobile } = useDropDrawerContext();\r\n  const TriggerComponent = isMobile ? DrawerTrigger : DropdownMenuTrigger;\r\n\r\n  return (\r\n    <TriggerComponent\r\n      data-slot=\"drop-drawer-trigger\"\r\n      className={className}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </TriggerComponent>\r\n  );\r\n}\r\n\r\nfunction DropDrawerContent({\r\n  className,\r\n  children,\r\n  ...props\r\n}:\r\n  | React.ComponentProps<typeof DrawerContent>\r\n  | React.ComponentProps<typeof DropdownMenuContent>) {\r\n  const { isMobile } = useDropDrawerContext();\r\n  const [activeSubmenu, setActiveSubmenu] = React.useState<string | null>(null);\r\n  const [submenuTitle, setSubmenuTitle] = React.useState<string | null>(null);\r\n  const [submenuStack, setSubmenuStack] = React.useState<\r\n    { id: string; title: string }[]\r\n  >([]);\r\n  // Add animation direction state\r\n  const [animationDirection, setAnimationDirection] = React.useState<\r\n    \"forward\" | \"backward\"\r\n  >(\"forward\");\r\n\r\n  // Create a ref to store submenu content by ID\r\n  const submenuContentRef = React.useRef<Map<string, React.ReactNode[]>>(\r\n    new Map()\r\n  );\r\n\r\n  // Function to navigate to a submenu\r\n  const navigateToSubmenu = React.useCallback((id: string, title: string) => {\r\n    // Set animation direction to forward when navigating to a submenu\r\n    setAnimationDirection(\"forward\");\r\n    setActiveSubmenu(id);\r\n    setSubmenuTitle(title);\r\n    setSubmenuStack((prev) => [...prev, { id, title }]);\r\n  }, []);\r\n\r\n  // Function to go back to previous menu\r\n  const goBack = React.useCallback(() => {\r\n    // Set animation direction to backward when going back\r\n    setAnimationDirection(\"backward\");\r\n\r\n    if (submenuStack.length <= 1) {\r\n      // If we're at the first level, go back to main menu\r\n      setActiveSubmenu(null);\r\n      setSubmenuTitle(null);\r\n      setSubmenuStack([]);\r\n    } else {\r\n      // Go back to previous submenu\r\n      const newStack = [...submenuStack];\r\n      newStack.pop(); // Remove current\r\n      const previous = newStack[newStack.length - 1];\r\n      setActiveSubmenu(previous.id);\r\n      setSubmenuTitle(previous.title);\r\n      setSubmenuStack(newStack);\r\n    }\r\n  }, [submenuStack]);\r\n\r\n  // Function to register submenu content\r\n  const registerSubmenuContent = React.useCallback(\r\n    (id: string, content: React.ReactNode[]) => {\r\n      submenuContentRef.current.set(id, content);\r\n    },\r\n    []\r\n  );\r\n\r\n  // Function to extract submenu content\r\n  const extractSubmenuContent = React.useCallback(\r\n    (elements: React.ReactNode, targetId: string): React.ReactNode[] => {\r\n      const result: React.ReactNode[] = [];\r\n\r\n      // Recursive function to search through all children\r\n      const findSubmenuContent = (node: React.ReactNode) => {\r\n        // Skip if not a valid element\r\n        if (!React.isValidElement(node)) return;\r\n\r\n        const element = node as React.ReactElement;\r\n        // Use a more specific type to avoid 'any'\r\n        const props = element.props as {\r\n          id?: string;\r\n          \"data-submenu-id\"?: string;\r\n          children?: React.ReactNode;\r\n        };\r\n\r\n        // Check if this is a DropDrawerSub\r\n        if (element.type === DropDrawerSub) {\r\n          // Get all possible ID values\r\n          const elementId = props.id;\r\n          const dataSubmenuId = props[\"data-submenu-id\"];\r\n\r\n          // If this is the submenu we're looking for\r\n          if (elementId === targetId || dataSubmenuId === targetId) {\r\n            // Find the SubContent within this Sub\r\n            if (props.children) {\r\n              React.Children.forEach(props.children, (child) => {\r\n                if (\r\n                  React.isValidElement(child) &&\r\n                  child.type === DropDrawerSubContent\r\n                ) {\r\n                  // Add all children of the SubContent to the result\r\n                  const subContentProps = child.props as {\r\n                    children?: React.ReactNode;\r\n                  };\r\n                  if (subContentProps.children) {\r\n                    React.Children.forEach(\r\n                      subContentProps.children,\r\n                      (contentChild) => {\r\n                        result.push(contentChild);\r\n                      }\r\n                    );\r\n                  }\r\n                }\r\n              });\r\n            }\r\n            return; // Found what we needed, no need to search deeper\r\n          }\r\n        }\r\n\r\n        // If this element has children, search through them\r\n        if (props.children) {\r\n          if (Array.isArray(props.children)) {\r\n            props.children.forEach((child: React.ReactNode) =>\r\n              findSubmenuContent(child)\r\n            );\r\n          } else {\r\n            findSubmenuContent(props.children);\r\n          }\r\n        }\r\n      };\r\n\r\n      // Start the search from the root elements\r\n      if (Array.isArray(elements)) {\r\n        elements.forEach((child) => findSubmenuContent(child));\r\n      } else {\r\n        findSubmenuContent(elements);\r\n      }\r\n\r\n      return result;\r\n    },\r\n    []\r\n  );\r\n\r\n  // Get submenu content (either from cache or extract it)\r\n  const getSubmenuContent = React.useCallback(\r\n    (id: string) => {\r\n      // Check if we have the content in our ref\r\n      const cachedContent = submenuContentRef.current.get(id || \"\");\r\n      if (cachedContent && cachedContent.length > 0) {\r\n        return cachedContent;\r\n      }\r\n\r\n      // If not in cache, extract it\r\n      const submenuContent = extractSubmenuContent(children, id);\r\n\r\n      if (submenuContent.length === 0) {\r\n        return [];\r\n      }\r\n\r\n      // Store in cache for future use\r\n      if (id) {\r\n        submenuContentRef.current.set(id, submenuContent);\r\n      }\r\n\r\n      return submenuContent;\r\n    },\r\n    [children, extractSubmenuContent]\r\n  );\r\n\r\n  // Animation variants for Framer Motion\r\n  const variants = {\r\n    enter: (direction: \"forward\" | \"backward\") => ({\r\n      x: direction === \"forward\" ? \"100%\" : \"-100%\",\r\n      opacity: 0,\r\n    }),\r\n    center: {\r\n      x: 0,\r\n      opacity: 1,\r\n    },\r\n    exit: (direction: \"forward\" | \"backward\") => ({\r\n      x: direction === \"forward\" ? \"-100%\" : \"100%\",\r\n      opacity: 0,\r\n    }),\r\n  };\r\n\r\n  // Animation transition\r\n  const transition = {\r\n    duration: 0.3,\r\n    ease: [0.25, 0.1, 0.25, 1.0], // cubic-bezier easing\r\n  };\r\n\r\n  if (isMobile) {\r\n    return (\r\n      <SubmenuContext.Provider\r\n        value={{\r\n          activeSubmenu,\r\n          setActiveSubmenu: (id) => {\r\n            if (id === null) {\r\n              setActiveSubmenu(null);\r\n              setSubmenuTitle(null);\r\n              setSubmenuStack([]);\r\n            }\r\n          },\r\n          submenuTitle,\r\n          setSubmenuTitle,\r\n          navigateToSubmenu,\r\n          registerSubmenuContent,\r\n        }}\r\n      >\r\n        <DrawerContent\r\n          data-slot=\"drop-drawer-content\"\r\n          className={cn(className)}\r\n          {...props}\r\n        >\r\n          {activeSubmenu ? (\r\n            <>\r\n              <DrawerHeader>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <button\r\n                    onClick={goBack}\r\n                    className=\"hover:bg-muted/50 rounded-full p-1\"\r\n                  >\r\n                    <ChevronLeftIcon className=\"h-5 w-5\" />\r\n                  </button>\r\n                  <DrawerTitle>{submenuTitle || \"Submenu\"}</DrawerTitle>\r\n                </div>\r\n              </DrawerHeader>\r\n              <div className=\"flex-1 overflow-hidden relative\">\r\n                {/* Use AnimatePresence to handle exit animations */}\r\n                <AnimatePresence\r\n                  initial={false}\r\n                  mode=\"wait\"\r\n                  custom={animationDirection}\r\n                >\r\n                  <motion.div\r\n                    key={activeSubmenu || \"main\"}\r\n                    custom={animationDirection}\r\n                    variants={variants}\r\n                    initial=\"enter\"\r\n                    animate=\"center\"\r\n                    exit=\"exit\"\r\n                    transition={transition}\r\n                    className=\"pb-6 space-y-1.5 w-full overflow-y-auto h-full\"\r\n                  >\r\n                    {activeSubmenu\r\n                      ? getSubmenuContent(activeSubmenu)\r\n                      : children}\r\n                  </motion.div>\r\n                </AnimatePresence>\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <DrawerHeader className=\"sr-only\">\r\n                <DrawerTitle>Menu</DrawerTitle>\r\n              </DrawerHeader>\r\n              <div className=\"overflow-hidden\">\r\n                <AnimatePresence\r\n                  initial={false}\r\n                  mode=\"wait\"\r\n                  custom={animationDirection}\r\n                >\r\n                  <motion.div\r\n                    key=\"main-menu\"\r\n                    custom={animationDirection}\r\n                    variants={variants}\r\n                    initial=\"enter\"\r\n                    animate=\"center\"\r\n                    exit=\"exit\"\r\n                    transition={transition}\r\n                    className=\"pb-6 space-y-1.5 w-full overflow-y-auto\"\r\n                  >\r\n                    {children}\r\n                  </motion.div>\r\n                </AnimatePresence>\r\n              </div>\r\n            </>\r\n          )}\r\n        </DrawerContent>\r\n      </SubmenuContext.Provider>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <SubmenuContext.Provider\r\n      value={{\r\n        activeSubmenu,\r\n        setActiveSubmenu,\r\n        submenuTitle,\r\n        setSubmenuTitle,\r\n        registerSubmenuContent,\r\n      }}\r\n    >\r\n      <DropdownMenuContent\r\n        data-slot=\"drop-drawer-content\"\r\n        align=\"end\"\r\n        sideOffset={4}\r\n        className={cn(\r\n          \"max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[220px] overflow-y-auto\",\r\n          className\r\n        )}\r\n        {...props}\r\n      >\r\n        {children}\r\n      </DropdownMenuContent>\r\n    </SubmenuContext.Provider>\r\n  );\r\n}\r\n\r\nfunction DropDrawerItem({\r\n  className,\r\n  children,\r\n  onSelect,\r\n  onClick,\r\n  icon,\r\n  variant = \"default\",\r\n  inset,\r\n  disabled,\r\n  ...props\r\n}: React.ComponentProps<typeof DropdownMenuItem> & {\r\n  icon?: React.ReactNode;\r\n}) {\r\n  const { isMobile } = useDropDrawerContext();\r\n\r\n  // Define hooks outside of conditionals to follow React rules\r\n  // Check if this item is inside a group by looking at parent elements\r\n  const isInGroup = React.useCallback(\r\n    (element: HTMLElement | null): boolean => {\r\n      if (!element) return false;\r\n\r\n      // Check if any parent has a data-drop-drawer-group attribute\r\n      let parent = element.parentElement;\r\n      while (parent) {\r\n        if (parent.hasAttribute(\"data-drop-drawer-group\")) {\r\n          return true;\r\n        }\r\n        parent = parent.parentElement;\r\n      }\r\n      return false;\r\n    },\r\n    []\r\n  );\r\n\r\n  // Create a ref to check if the item is in a group\r\n  const itemRef = React.useRef<HTMLDivElement>(null);\r\n  const [isInsideGroup, setIsInsideGroup] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    // Only run this effect in mobile mode\r\n    if (!isMobile) return;\r\n\r\n    // Use a short timeout to ensure the DOM is fully rendered\r\n    const timer = setTimeout(() => {\r\n      if (itemRef.current) {\r\n        setIsInsideGroup(isInGroup(itemRef.current));\r\n      }\r\n    }, 0);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [isInGroup, isMobile]);\r\n\r\n  if (isMobile) {\r\n    const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (disabled) return;\r\n      if (onClick) onClick(e);\r\n      if (onSelect) onSelect(e as unknown as Event);\r\n    };\r\n\r\n    // Only wrap in DrawerClose if it's not a submenu item\r\n    const content = (\r\n      <div\r\n        ref={itemRef}\r\n        data-slot=\"drop-drawer-item\"\r\n        data-variant={variant}\r\n        data-inset={inset}\r\n        data-disabled={disabled}\r\n        className={cn(\r\n          \"flex cursor-pointer items-center justify-between px-4 py-4\",\r\n          // Only apply margin, background and rounded corners if not in a group\r\n          !isInsideGroup && \"bg-accent dark:bg-accent mx-2 my-1.5 rounded-md\",\r\n          // For items in a group, don't add background but add more padding\r\n          isInsideGroup && \"bg-transparent py-4\",\r\n          inset && \"pl-8\",\r\n          variant === \"destructive\" && \"text-destructive dark:text-destructive\",\r\n          disabled && \"pointer-events-none opacity-50\",\r\n          className\r\n        )}\r\n        onClick={handleClick}\r\n        aria-disabled={disabled}\r\n        {...props}\r\n      >\r\n        <div className=\"flex items-center gap-2\">{children}</div>\r\n        {icon && <div className=\"flex-shrink-0\">{icon}</div>}\r\n      </div>\r\n    );\r\n\r\n    // Check if this is inside a submenu\r\n    const isInSubmenu =\r\n      (props as Record<string, unknown>)[\"data-parent-submenu-id\"] ||\r\n      (props as Record<string, unknown>)[\"data-parent-submenu\"];\r\n\r\n    if (isInSubmenu) {\r\n      return content;\r\n    }\r\n\r\n    return <DrawerClose asChild>{content}</DrawerClose>;\r\n  }\r\n\r\n  return (\r\n    <DropdownMenuItem\r\n      data-slot=\"drop-drawer-item\"\r\n      data-variant={variant}\r\n      data-inset={inset}\r\n      className={className}\r\n      onSelect={onSelect}\r\n      onClick={onClick as React.MouseEventHandler<HTMLDivElement>}\r\n      variant={variant}\r\n      inset={inset}\r\n      disabled={disabled}\r\n      {...props}\r\n    >\r\n      <div className=\"flex w-full items-center justify-between\">\r\n        <div>{children}</div>\r\n        {icon && <div>{icon}</div>}\r\n      </div>\r\n    </DropdownMenuItem>\r\n  );\r\n}\r\n\r\nfunction DropDrawerSeparator({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof DropdownMenuSeparator>) {\r\n  const { isMobile } = useDropDrawerContext();\r\n\r\n  // For mobile, render a simple divider\r\n  if (isMobile) {\r\n    return null;\r\n  }\r\n\r\n  // For desktop, use the standard dropdown separator\r\n  return (\r\n    <DropdownMenuSeparator\r\n      data-slot=\"drop-drawer-separator\"\r\n      className={className}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction DropDrawerLabel({\r\n  className,\r\n  children,\r\n  ...props\r\n}:\r\n  | React.ComponentProps<typeof DropdownMenuLabel>\r\n  | React.ComponentProps<typeof DrawerTitle>) {\r\n  const { isMobile } = useDropDrawerContext();\r\n\r\n  if (isMobile) {\r\n    return (\r\n      <DrawerHeader className=\"p-0\">\r\n        <DrawerTitle\r\n          data-slot=\"drop-drawer-label\"\r\n          className={cn(\r\n            \"text-muted-foreground px-4 py-2 text-sm font-medium\",\r\n            className\r\n          )}\r\n          {...props}\r\n        >\r\n          {children}\r\n        </DrawerTitle>\r\n      </DrawerHeader>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <DropdownMenuLabel\r\n      data-slot=\"drop-drawer-label\"\r\n      className={className}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </DropdownMenuLabel>\r\n  );\r\n}\r\n\r\nfunction DropDrawerFooter({\r\n  className,\r\n  children,\r\n  ...props\r\n}: React.ComponentProps<typeof DrawerFooter> | React.ComponentProps<\"div\">) {\r\n  const { isMobile } = useDropDrawerContext();\r\n\r\n  if (isMobile) {\r\n    return (\r\n      <DrawerFooter\r\n        data-slot=\"drop-drawer-footer\"\r\n        className={cn(\"p-4\", className)}\r\n        {...props}\r\n      >\r\n        {children}\r\n      </DrawerFooter>\r\n    );\r\n  }\r\n\r\n  // No direct equivalent in DropdownMenu, so we'll just render a div\r\n  return (\r\n    <div\r\n      data-slot=\"drop-drawer-footer\"\r\n      className={cn(\"p-2\", className)}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction DropDrawerGroup({\r\n  className,\r\n  children,\r\n  ...props\r\n}: React.ComponentProps<\"div\"> & {\r\n  children: React.ReactNode;\r\n}) {\r\n  const { isMobile } = useDropDrawerContext();\r\n\r\n  // Add separators between children on mobile\r\n  const childrenWithSeparators = React.useMemo(() => {\r\n    if (!isMobile) return children;\r\n\r\n    const childArray = React.Children.toArray(children);\r\n\r\n    // Filter out any existing separators\r\n    const filteredChildren = childArray.filter(\r\n      (child) =>\r\n        React.isValidElement(child) && child.type !== DropDrawerSeparator\r\n    );\r\n\r\n    // Add separators between items\r\n    return filteredChildren.flatMap((child, index) => {\r\n      if (index === filteredChildren.length - 1) return [child];\r\n      return [\r\n        child,\r\n        <div\r\n          key={`separator-${index}`}\r\n          className=\"bg-border dark:bg-muted h-px\"\r\n          aria-hidden=\"true\"\r\n        />,\r\n      ];\r\n    });\r\n  }, [children, isMobile]);\r\n\r\n  if (isMobile) {\r\n    return (\r\n      <div\r\n        data-drop-drawer-group\r\n        data-slot=\"drop-drawer-group\"\r\n        role=\"group\"\r\n        className={cn(\r\n          \"bg-accent dark:bg-accent mx-2 my-3 overflow-hidden rounded-xl\",\r\n          className\r\n        )}\r\n        {...props}\r\n      >\r\n        {childrenWithSeparators}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // On desktop, use a div with proper role and attributes\r\n  return (\r\n    <div\r\n      data-drop-drawer-group\r\n      data-slot=\"drop-drawer-group\"\r\n      role=\"group\"\r\n      className={className}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Context for managing submenu state on mobile\r\ninterface SubmenuContextType {\r\n  activeSubmenu: string | null;\r\n  setActiveSubmenu: (id: string | null) => void;\r\n  submenuTitle: string | null;\r\n  setSubmenuTitle: (title: string | null) => void;\r\n  navigateToSubmenu?: (id: string, title: string) => void;\r\n  registerSubmenuContent?: (id: string, content: React.ReactNode[]) => void;\r\n}\r\n\r\nconst SubmenuContext = React.createContext<SubmenuContextType>({\r\n  activeSubmenu: null,\r\n  setActiveSubmenu: () => {},\r\n  submenuTitle: null,\r\n  setSubmenuTitle: () => {},\r\n  navigateToSubmenu: undefined,\r\n  registerSubmenuContent: undefined,\r\n});\r\n\r\n// Submenu components\r\n// Counter for generating simple numeric IDs\r\nlet submenuIdCounter = 0;\r\n\r\nfunction DropDrawerSub({\r\n  children,\r\n  id,\r\n  ...props\r\n}: React.ComponentProps<typeof DropdownMenuSub> & {\r\n  id?: string;\r\n}) {\r\n  const { isMobile } = useDropDrawerContext();\r\n  const { registerSubmenuContent } = React.useContext(SubmenuContext);\r\n\r\n  // Generate a simple numeric ID instead of using React.useId()\r\n  const [generatedId] = React.useState(() => `submenu-${submenuIdCounter++}`);\r\n  const submenuId = id || generatedId;\r\n\r\n  // Extract submenu content to register with parent\r\n  React.useEffect(() => {\r\n    if (!registerSubmenuContent) return;\r\n\r\n    // Find the SubContent within this Sub\r\n    const contentItems: React.ReactNode[] = [];\r\n    React.Children.forEach(children, (child) => {\r\n      if (React.isValidElement(child) && child.type === DropDrawerSubContent) {\r\n        // Add all children of the SubContent to the result\r\n        React.Children.forEach(\r\n          (child.props as { children?: React.ReactNode }).children,\r\n          (contentChild) => {\r\n            contentItems.push(contentChild);\r\n          }\r\n        );\r\n      }\r\n    });\r\n\r\n    // Register the content with the parent\r\n    if (contentItems.length > 0) {\r\n      registerSubmenuContent(submenuId, contentItems);\r\n    }\r\n  }, [children, registerSubmenuContent, submenuId]);\r\n\r\n  if (isMobile) {\r\n    // For mobile, we'll use the context to manage submenu state\r\n    // Process children to pass the submenu ID to the trigger and content\r\n    const processedChildren = React.Children.map(children, (child) => {\r\n      if (!React.isValidElement(child)) return child;\r\n\r\n      if (child.type === DropDrawerSubTrigger) {\r\n        return React.cloneElement(\r\n          child as React.ReactElement,\r\n          {\r\n            ...(child.props as object),\r\n            \"data-parent-submenu-id\": submenuId,\r\n            \"data-submenu-id\": submenuId,\r\n            // Use only data attributes, not custom props\r\n            \"data-parent-submenu\": submenuId,\r\n          } as React.HTMLAttributes<HTMLElement>\r\n        );\r\n      }\r\n\r\n      if (child.type === DropDrawerSubContent) {\r\n        return React.cloneElement(\r\n          child as React.ReactElement,\r\n          {\r\n            ...(child.props as object),\r\n            \"data-parent-submenu-id\": submenuId,\r\n            \"data-submenu-id\": submenuId,\r\n            // Use only data attributes, not custom props\r\n            \"data-parent-submenu\": submenuId,\r\n          } as React.HTMLAttributes<HTMLElement>\r\n        );\r\n      }\r\n\r\n      return child;\r\n    });\r\n\r\n    return (\r\n      <div\r\n        data-slot=\"drop-drawer-sub\"\r\n        data-submenu-id={submenuId}\r\n        id={submenuId}\r\n      >\r\n        {processedChildren}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // For desktop, pass the generated ID to the DropdownMenuSub\r\n  return (\r\n    <DropdownMenuSub\r\n      data-slot=\"drop-drawer-sub\"\r\n      data-submenu-id={submenuId}\r\n      // Don't pass id to DropdownMenuSub as it doesn't accept this prop\r\n      {...props}\r\n    >\r\n      {children}\r\n    </DropdownMenuSub>\r\n  );\r\n}\r\n\r\nfunction DropDrawerSubTrigger({\r\n  className,\r\n  inset,\r\n  children,\r\n  ...props\r\n}: React.ComponentProps<typeof DropdownMenuSubTrigger> & {\r\n  icon?: React.ReactNode;\r\n}) {\r\n  const { isMobile } = useDropDrawerContext();\r\n  const { navigateToSubmenu } = React.useContext(SubmenuContext);\r\n\r\n  // Define hooks outside of conditionals to follow React rules\r\n  // Check if this item is inside a group by looking at parent elements\r\n  const isInGroup = React.useCallback(\r\n    (element: HTMLElement | null): boolean => {\r\n      if (!element) return false;\r\n\r\n      // Check if any parent has a data-drop-drawer-group attribute\r\n      let parent = element.parentElement;\r\n      while (parent) {\r\n        if (parent.hasAttribute(\"data-drop-drawer-group\")) {\r\n          return true;\r\n        }\r\n        parent = parent.parentElement;\r\n      }\r\n      return false;\r\n    },\r\n    []\r\n  );\r\n\r\n  // Create a ref to check if the item is in a group\r\n  const itemRef = React.useRef<HTMLDivElement>(null);\r\n  const [isInsideGroup, setIsInsideGroup] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    // Only run this effect in mobile mode\r\n    if (!isMobile) return;\r\n\r\n    // Use a short timeout to ensure the DOM is fully rendered\r\n    const timer = setTimeout(() => {\r\n      if (itemRef.current) {\r\n        setIsInsideGroup(isInGroup(itemRef.current));\r\n      }\r\n    }, 0);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [isInGroup, isMobile]);\r\n\r\n  if (isMobile) {\r\n    // Find the parent submenu ID\r\n    const handleClick = (e: React.MouseEvent) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n\r\n      // Get the closest parent with data-submenu-id attribute\r\n      const element = e.currentTarget as HTMLElement;\r\n      let submenuId: string | null = null;\r\n\r\n      // First check if the element itself has the data attribute\r\n      if (element.closest(\"[data-submenu-id]\")) {\r\n        const closestElement = element.closest(\"[data-submenu-id]\");\r\n        const id = closestElement?.getAttribute(\"data-submenu-id\");\r\n        if (id) {\r\n          submenuId = id;\r\n        }\r\n      }\r\n\r\n      // If not found, try props\r\n      if (!submenuId) {\r\n        submenuId =\r\n          ((props as Record<string, unknown>)[\r\n            \"data-parent-submenu-id\"\r\n          ] as string) ||\r\n          ((props as Record<string, unknown>)[\"data-parent-submenu\"] as string);\r\n      }\r\n\r\n      if (!submenuId) {\r\n        return;\r\n      }\r\n\r\n      // Get the title\r\n      const title = typeof children === \"string\" ? children : \"Submenu\";\r\n\r\n      // Navigate to the submenu\r\n      if (navigateToSubmenu) {\r\n        navigateToSubmenu(submenuId, title);\r\n      }\r\n    };\r\n\r\n    // Combine onClick handlers\r\n    const combinedOnClick = (e: React.MouseEvent) => {\r\n      // Call the original onClick if provided\r\n      const typedProps = props as Record<string, unknown>;\r\n      if (typedProps.onClick) {\r\n        const originalOnClick =\r\n          typedProps.onClick as React.MouseEventHandler<HTMLDivElement>;\r\n        originalOnClick(e as React.MouseEvent<HTMLDivElement>);\r\n      }\r\n\r\n      // Call our navigation handler\r\n      handleClick(e);\r\n    };\r\n\r\n    // Remove onClick from props to avoid duplicate handlers\r\n    const { ...restProps } = props as Record<string, unknown>;\r\n\r\n    // Don't wrap in DrawerClose for submenu triggers\r\n    return (\r\n      <div\r\n        ref={itemRef}\r\n        data-slot=\"drop-drawer-sub-trigger\"\r\n        data-inset={inset}\r\n        className={cn(\r\n          \"flex cursor-pointer items-center justify-between px-4 py-4\",\r\n          // Only apply margin, background and rounded corners if not in a group\r\n          !isInsideGroup && \"bg-accent dark:bg-accent mx-2 my-1.5 rounded-md\",\r\n          // For items in a group, don't add background but add more padding\r\n          isInsideGroup && \"bg-transparent py-4\",\r\n          inset && \"pl-8\",\r\n          className\r\n        )}\r\n        onClick={combinedOnClick}\r\n        {...restProps}\r\n      >\r\n        <div className=\"flex items-center gap-2\">{children}</div>\r\n        <ChevronRightIcon className=\"h-5 w-5\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <DropdownMenuSubTrigger\r\n      data-slot=\"drop-drawer-sub-trigger\"\r\n      data-inset={inset}\r\n      className={className}\r\n      inset={inset}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </DropdownMenuSubTrigger>\r\n  );\r\n}\r\n\r\nfunction DropDrawerSubContent({\r\n  className,\r\n  sideOffset = 4,\r\n  children,\r\n  ...props\r\n}: React.ComponentProps<typeof DropdownMenuSubContent>) {\r\n  const { isMobile } = useDropDrawerContext();\r\n\r\n  if (isMobile) {\r\n    // For mobile, we don't render the content directly\r\n    // It will be rendered by the DropDrawerContent component when active\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <DropdownMenuSubContent\r\n      data-slot=\"drop-drawer-sub-content\"\r\n      sideOffset={sideOffset}\r\n      className={cn(\r\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border p-1 shadow-lg\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </DropdownMenuSubContent>\r\n  );\r\n}\r\n\r\nexport {\r\n  DropDrawer,\r\n  DropDrawerContent,\r\n  DropDrawerFooter,\r\n  DropDrawerGroup,\r\n  DropDrawerItem,\r\n  DropDrawerLabel,\r\n  DropDrawerSeparator,\r\n  DropDrawerSub,\r\n  DropDrawerSubContent,\r\n  DropDrawerSubTrigger,\r\n  DropDrawerTrigger,\r\n};\r\n",
      "type": "registry:component"
    },
    {
      "path": "components\\ui\\dropdrawer.tsx",
      "content": "\"use client\";\r\n\r\nimport { AnimatePresence, motion } from \"framer-motion\";\r\nimport { ChevronLeftIcon, ChevronRightIcon } from \"lucide-react\";\r\nimport * as React from \"react\";\r\n\r\nimport {\r\n  Drawer,\r\n  DrawerClose,\r\n  DrawerContent,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerTitle,\r\n  DrawerTrigger,\r\n} from \"@/components/ui/drawer\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuSub,\r\n  DropdownMenuSubContent,\r\n  DropdownMenuSubTrigger,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport { useIsMobile } from \"@/hooks/use-mobile\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst DropDrawerContext = React.createContext<{ isMobile: boolean }>({\r\n  isMobile: false,\r\n});\r\n\r\nconst useDropDrawerContext = () => {\r\n  const context = React.useContext(DropDrawerContext);\r\n  if (!context) {\r\n    throw new Error(\r\n      \"DropDrawer components cannot be rendered outside the DropDrawer Context\"\r\n    );\r\n  }\r\n  return context;\r\n};\r\n\r\nfunction DropDrawer({\r\n  children,\r\n  ...props\r\n}:\r\n  | React.ComponentProps<typeof Drawer>\r\n  | React.ComponentProps<typeof DropdownMenu>) {\r\n  const isMobile = useIsMobile();\r\n  const DropdownComponent = isMobile ? Drawer : DropdownMenu;\r\n\r\n  return (\r\n    <DropDrawerContext.Provider value={{ isMobile }}>\r\n      <DropdownComponent\r\n        data-slot=\"drop-drawer\"\r\n        {...(isMobile && { autoFocus: true })}\r\n        {...props}\r\n      >\r\n        {children}\r\n      </DropdownComponent>\r\n    </DropDrawerContext.Provider>\r\n  );\r\n}\r\n\r\nfunction DropDrawerTrigger({\r\n  className,\r\n  children,\r\n  ...props\r\n}:\r\n  | React.ComponentProps<typeof DrawerTrigger>\r\n  | React.ComponentProps<typeof DropdownMenuTrigger>) {\r\n  const { isMobile } = useDropDrawerContext();\r\n  const TriggerComponent = isMobile ? DrawerTrigger : DropdownMenuTrigger;\r\n\r\n  return (\r\n    <TriggerComponent\r\n      data-slot=\"drop-drawer-trigger\"\r\n      className={className}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </TriggerComponent>\r\n  );\r\n}\r\n\r\nfunction DropDrawerContent({\r\n  className,\r\n  children,\r\n  ...props\r\n}:\r\n  | React.ComponentProps<typeof DrawerContent>\r\n  | React.ComponentProps<typeof DropdownMenuContent>) {\r\n  const { isMobile } = useDropDrawerContext();\r\n  const [activeSubmenu, setActiveSubmenu] = React.useState<string | null>(null);\r\n  const [submenuTitle, setSubmenuTitle] = React.useState<string | null>(null);\r\n  const [submenuStack, setSubmenuStack] = React.useState<\r\n    { id: string; title: string }[]\r\n  >([]);\r\n  // Add animation direction state\r\n  const [animationDirection, setAnimationDirection] = React.useState<\r\n    \"forward\" | \"backward\"\r\n  >(\"forward\");\r\n\r\n  // Create a ref to store submenu content by ID\r\n  const submenuContentRef = React.useRef<Map<string, React.ReactNode[]>>(\r\n    new Map()\r\n  );\r\n\r\n  // Function to navigate to a submenu\r\n  const navigateToSubmenu = React.useCallback((id: string, title: string) => {\r\n    // Set animation direction to forward when navigating to a submenu\r\n    setAnimationDirection(\"forward\");\r\n    setActiveSubmenu(id);\r\n    setSubmenuTitle(title);\r\n    setSubmenuStack((prev) => [...prev, { id, title }]);\r\n  }, []);\r\n\r\n  // Function to go back to previous menu\r\n  const goBack = React.useCallback(() => {\r\n    // Set animation direction to backward when going back\r\n    setAnimationDirection(\"backward\");\r\n\r\n    if (submenuStack.length <= 1) {\r\n      // If we're at the first level, go back to main menu\r\n      setActiveSubmenu(null);\r\n      setSubmenuTitle(null);\r\n      setSubmenuStack([]);\r\n    } else {\r\n      // Go back to previous submenu\r\n      const newStack = [...submenuStack];\r\n      newStack.pop(); // Remove current\r\n      const previous = newStack[newStack.length - 1];\r\n      setActiveSubmenu(previous.id);\r\n      setSubmenuTitle(previous.title);\r\n      setSubmenuStack(newStack);\r\n    }\r\n  }, [submenuStack]);\r\n\r\n  // Function to register submenu content\r\n  const registerSubmenuContent = React.useCallback(\r\n    (id: string, content: React.ReactNode[]) => {\r\n      submenuContentRef.current.set(id, content);\r\n    },\r\n    []\r\n  );\r\n\r\n  // Function to extract submenu content\r\n  const extractSubmenuContent = React.useCallback(\r\n    (elements: React.ReactNode, targetId: string): React.ReactNode[] => {\r\n      const result: React.ReactNode[] = [];\r\n\r\n      // Recursive function to search through all children\r\n      const findSubmenuContent = (node: React.ReactNode) => {\r\n        // Skip if not a valid element\r\n        if (!React.isValidElement(node)) return;\r\n\r\n        const element = node as React.ReactElement;\r\n        // Use a more specific type to avoid 'any'\r\n        const props = element.props as {\r\n          id?: string;\r\n          \"data-submenu-id\"?: string;\r\n          children?: React.ReactNode;\r\n        };\r\n\r\n        // Check if this is a DropDrawerSub\r\n        if (element.type === DropDrawerSub) {\r\n          // Get all possible ID values\r\n          const elementId = props.id;\r\n          const dataSubmenuId = props[\"data-submenu-id\"];\r\n\r\n          // If this is the submenu we're looking for\r\n          if (elementId === targetId || dataSubmenuId === targetId) {\r\n            // Find the SubContent within this Sub\r\n            if (props.children) {\r\n              React.Children.forEach(props.children, (child) => {\r\n                if (\r\n                  React.isValidElement(child) &&\r\n                  child.type === DropDrawerSubContent\r\n                ) {\r\n                  // Add all children of the SubContent to the result\r\n                  const subContentProps = child.props as {\r\n                    children?: React.ReactNode;\r\n                  };\r\n                  if (subContentProps.children) {\r\n                    React.Children.forEach(\r\n                      subContentProps.children,\r\n                      (contentChild) => {\r\n                        result.push(contentChild);\r\n                      }\r\n                    );\r\n                  }\r\n                }\r\n              });\r\n            }\r\n            return; // Found what we needed, no need to search deeper\r\n          }\r\n        }\r\n\r\n        // If this element has children, search through them\r\n        if (props.children) {\r\n          if (Array.isArray(props.children)) {\r\n            props.children.forEach((child: React.ReactNode) =>\r\n              findSubmenuContent(child)\r\n            );\r\n          } else {\r\n            findSubmenuContent(props.children);\r\n          }\r\n        }\r\n      };\r\n\r\n      // Start the search from the root elements\r\n      if (Array.isArray(elements)) {\r\n        elements.forEach((child) => findSubmenuContent(child));\r\n      } else {\r\n        findSubmenuContent(elements);\r\n      }\r\n\r\n      return result;\r\n    },\r\n    []\r\n  );\r\n\r\n  // Get submenu content (either from cache or extract it)\r\n  const getSubmenuContent = React.useCallback(\r\n    (id: string) => {\r\n      // Check if we have the content in our ref\r\n      const cachedContent = submenuContentRef.current.get(id || \"\");\r\n      if (cachedContent && cachedContent.length > 0) {\r\n        return cachedContent;\r\n      }\r\n\r\n      // If not in cache, extract it\r\n      const submenuContent = extractSubmenuContent(children, id);\r\n\r\n      if (submenuContent.length === 0) {\r\n        return [];\r\n      }\r\n\r\n      // Store in cache for future use\r\n      if (id) {\r\n        submenuContentRef.current.set(id, submenuContent);\r\n      }\r\n\r\n      return submenuContent;\r\n    },\r\n    [children, extractSubmenuContent]\r\n  );\r\n\r\n  // Animation variants for Framer Motion\r\n  const variants = {\r\n    enter: (direction: \"forward\" | \"backward\") => ({\r\n      x: direction === \"forward\" ? \"100%\" : \"-100%\",\r\n      opacity: 0,\r\n    }),\r\n    center: {\r\n      x: 0,\r\n      opacity: 1,\r\n    },\r\n    exit: (direction: \"forward\" | \"backward\") => ({\r\n      x: direction === \"forward\" ? \"-100%\" : \"100%\",\r\n      opacity: 0,\r\n    }),\r\n  };\r\n\r\n  // Animation transition\r\n  const transition = {\r\n    duration: 0.3,\r\n    ease: [0.25, 0.1, 0.25, 1.0], // cubic-bezier easing\r\n  };\r\n\r\n  if (isMobile) {\r\n    return (\r\n      <SubmenuContext.Provider\r\n        value={{\r\n          activeSubmenu,\r\n          setActiveSubmenu: (id) => {\r\n            if (id === null) {\r\n              setActiveSubmenu(null);\r\n              setSubmenuTitle(null);\r\n              setSubmenuStack([]);\r\n            }\r\n          },\r\n          submenuTitle,\r\n          setSubmenuTitle,\r\n          navigateToSubmenu,\r\n          registerSubmenuContent,\r\n        }}\r\n      >\r\n        <DrawerContent\r\n          data-slot=\"drop-drawer-content\"\r\n          className={cn(className)}\r\n          {...props}\r\n        >\r\n          {activeSubmenu ? (\r\n            <>\r\n              <DrawerHeader>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <button\r\n                    onClick={goBack}\r\n                    className=\"hover:bg-muted/50 rounded-full p-1\"\r\n                  >\r\n                    <ChevronLeftIcon className=\"h-5 w-5\" />\r\n                  </button>\r\n                  <DrawerTitle>{submenuTitle || \"Submenu\"}</DrawerTitle>\r\n                </div>\r\n              </DrawerHeader>\r\n              <div className=\"flex-1 overflow-hidden relative\">\r\n                {/* Use AnimatePresence to handle exit animations */}\r\n                <AnimatePresence\r\n                  initial={false}\r\n                  mode=\"wait\"\r\n                  custom={animationDirection}\r\n                >\r\n                  <motion.div\r\n                    key={activeSubmenu || \"main\"}\r\n                    custom={animationDirection}\r\n                    variants={variants}\r\n                    initial=\"enter\"\r\n                    animate=\"center\"\r\n                    exit=\"exit\"\r\n                    transition={transition}\r\n                    className=\"pb-6 space-y-1.5 w-full overflow-y-auto h-full\"\r\n                  >\r\n                    {activeSubmenu\r\n                      ? getSubmenuContent(activeSubmenu)\r\n                      : children}\r\n                  </motion.div>\r\n                </AnimatePresence>\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <DrawerHeader className=\"sr-only\">\r\n                <DrawerTitle>Menu</DrawerTitle>\r\n              </DrawerHeader>\r\n              <div className=\"overflow-hidden\">\r\n                <AnimatePresence\r\n                  initial={false}\r\n                  mode=\"wait\"\r\n                  custom={animationDirection}\r\n                >\r\n                  <motion.div\r\n                    key=\"main-menu\"\r\n                    custom={animationDirection}\r\n                    variants={variants}\r\n                    initial=\"enter\"\r\n                    animate=\"center\"\r\n                    exit=\"exit\"\r\n                    transition={transition}\r\n                    className=\"pb-6 space-y-1.5 w-full overflow-y-auto\"\r\n                  >\r\n                    {children}\r\n                  </motion.div>\r\n                </AnimatePresence>\r\n              </div>\r\n            </>\r\n          )}\r\n        </DrawerContent>\r\n      </SubmenuContext.Provider>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <SubmenuContext.Provider\r\n      value={{\r\n        activeSubmenu,\r\n        setActiveSubmenu,\r\n        submenuTitle,\r\n        setSubmenuTitle,\r\n        registerSubmenuContent,\r\n      }}\r\n    >\r\n      <DropdownMenuContent\r\n        data-slot=\"drop-drawer-content\"\r\n        align=\"end\"\r\n        sideOffset={4}\r\n        className={cn(\r\n          \"max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[220px] overflow-y-auto\",\r\n          className\r\n        )}\r\n        {...props}\r\n      >\r\n        {children}\r\n      </DropdownMenuContent>\r\n    </SubmenuContext.Provider>\r\n  );\r\n}\r\n\r\nfunction DropDrawerItem({\r\n  className,\r\n  children,\r\n  onSelect,\r\n  onClick,\r\n  icon,\r\n  variant = \"default\",\r\n  inset,\r\n  disabled,\r\n  ...props\r\n}: React.ComponentProps<typeof DropdownMenuItem> & {\r\n  icon?: React.ReactNode;\r\n}) {\r\n  const { isMobile } = useDropDrawerContext();\r\n\r\n  // Define hooks outside of conditionals to follow React rules\r\n  // Check if this item is inside a group by looking at parent elements\r\n  const isInGroup = React.useCallback(\r\n    (element: HTMLElement | null): boolean => {\r\n      if (!element) return false;\r\n\r\n      // Check if any parent has a data-drop-drawer-group attribute\r\n      let parent = element.parentElement;\r\n      while (parent) {\r\n        if (parent.hasAttribute(\"data-drop-drawer-group\")) {\r\n          return true;\r\n        }\r\n        parent = parent.parentElement;\r\n      }\r\n      return false;\r\n    },\r\n    []\r\n  );\r\n\r\n  // Create a ref to check if the item is in a group\r\n  const itemRef = React.useRef<HTMLDivElement>(null);\r\n  const [isInsideGroup, setIsInsideGroup] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    // Only run this effect in mobile mode\r\n    if (!isMobile) return;\r\n\r\n    // Use a short timeout to ensure the DOM is fully rendered\r\n    const timer = setTimeout(() => {\r\n      if (itemRef.current) {\r\n        setIsInsideGroup(isInGroup(itemRef.current));\r\n      }\r\n    }, 0);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [isInGroup, isMobile]);\r\n\r\n  if (isMobile) {\r\n    const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (disabled) return;\r\n      if (onClick) onClick(e);\r\n      if (onSelect) onSelect(e as unknown as Event);\r\n    };\r\n\r\n    // Only wrap in DrawerClose if it's not a submenu item\r\n    const content = (\r\n      <div\r\n        ref={itemRef}\r\n        data-slot=\"drop-drawer-item\"\r\n        data-variant={variant}\r\n        data-inset={inset}\r\n        data-disabled={disabled}\r\n        className={cn(\r\n          \"flex cursor-pointer items-center justify-between px-4 py-4\",\r\n          // Only apply margin, background and rounded corners if not in a group\r\n          !isInsideGroup && \"bg-accent dark:bg-accent mx-2 my-1.5 rounded-md\",\r\n          // For items in a group, don't add background but add more padding\r\n          isInsideGroup && \"bg-transparent py-4\",\r\n          inset && \"pl-8\",\r\n          variant === \"destructive\" && \"text-destructive dark:text-destructive\",\r\n          disabled && \"pointer-events-none opacity-50\",\r\n          className\r\n        )}\r\n        onClick={handleClick}\r\n        aria-disabled={disabled}\r\n        {...props}\r\n      >\r\n        <div className=\"flex items-center gap-2\">{children}</div>\r\n        {icon && <div className=\"flex-shrink-0\">{icon}</div>}\r\n      </div>\r\n    );\r\n\r\n    // Check if this is inside a submenu\r\n    const isInSubmenu =\r\n      (props as Record<string, unknown>)[\"data-parent-submenu-id\"] ||\r\n      (props as Record<string, unknown>)[\"data-parent-submenu\"];\r\n\r\n    if (isInSubmenu) {\r\n      return content;\r\n    }\r\n\r\n    return <DrawerClose asChild>{content}</DrawerClose>;\r\n  }\r\n\r\n  return (\r\n    <DropdownMenuItem\r\n      data-slot=\"drop-drawer-item\"\r\n      data-variant={variant}\r\n      data-inset={inset}\r\n      className={className}\r\n      onSelect={onSelect}\r\n      onClick={onClick as React.MouseEventHandler<HTMLDivElement>}\r\n      variant={variant}\r\n      inset={inset}\r\n      disabled={disabled}\r\n      {...props}\r\n    >\r\n      <div className=\"flex w-full items-center justify-between\">\r\n        <div>{children}</div>\r\n        {icon && <div>{icon}</div>}\r\n      </div>\r\n    </DropdownMenuItem>\r\n  );\r\n}\r\n\r\nfunction DropDrawerSeparator({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof DropdownMenuSeparator>) {\r\n  const { isMobile } = useDropDrawerContext();\r\n\r\n  // For mobile, render a simple divider\r\n  if (isMobile) {\r\n    return null;\r\n  }\r\n\r\n  // For desktop, use the standard dropdown separator\r\n  return (\r\n    <DropdownMenuSeparator\r\n      data-slot=\"drop-drawer-separator\"\r\n      className={className}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction DropDrawerLabel({\r\n  className,\r\n  children,\r\n  ...props\r\n}:\r\n  | React.ComponentProps<typeof DropdownMenuLabel>\r\n  | React.ComponentProps<typeof DrawerTitle>) {\r\n  const { isMobile } = useDropDrawerContext();\r\n\r\n  if (isMobile) {\r\n    return (\r\n      <DrawerHeader className=\"p-0\">\r\n        <DrawerTitle\r\n          data-slot=\"drop-drawer-label\"\r\n          className={cn(\r\n            \"text-muted-foreground px-4 py-2 text-sm font-medium\",\r\n            className\r\n          )}\r\n          {...props}\r\n        >\r\n          {children}\r\n        </DrawerTitle>\r\n      </DrawerHeader>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <DropdownMenuLabel\r\n      data-slot=\"drop-drawer-label\"\r\n      className={className}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </DropdownMenuLabel>\r\n  );\r\n}\r\n\r\nfunction DropDrawerFooter({\r\n  className,\r\n  children,\r\n  ...props\r\n}: React.ComponentProps<typeof DrawerFooter> | React.ComponentProps<\"div\">) {\r\n  const { isMobile } = useDropDrawerContext();\r\n\r\n  if (isMobile) {\r\n    return (\r\n      <DrawerFooter\r\n        data-slot=\"drop-drawer-footer\"\r\n        className={cn(\"p-4\", className)}\r\n        {...props}\r\n      >\r\n        {children}\r\n      </DrawerFooter>\r\n    );\r\n  }\r\n\r\n  // No direct equivalent in DropdownMenu, so we'll just render a div\r\n  return (\r\n    <div\r\n      data-slot=\"drop-drawer-footer\"\r\n      className={cn(\"p-2\", className)}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction DropDrawerGroup({\r\n  className,\r\n  children,\r\n  ...props\r\n}: React.ComponentProps<\"div\"> & {\r\n  children: React.ReactNode;\r\n}) {\r\n  const { isMobile } = useDropDrawerContext();\r\n\r\n  // Add separators between children on mobile\r\n  const childrenWithSeparators = React.useMemo(() => {\r\n    if (!isMobile) return children;\r\n\r\n    const childArray = React.Children.toArray(children);\r\n\r\n    // Filter out any existing separators\r\n    const filteredChildren = childArray.filter(\r\n      (child) =>\r\n        React.isValidElement(child) && child.type !== DropDrawerSeparator\r\n    );\r\n\r\n    // Add separators between items\r\n    return filteredChildren.flatMap((child, index) => {\r\n      if (index === filteredChildren.length - 1) return [child];\r\n      return [\r\n        child,\r\n        <div\r\n          key={`separator-${index}`}\r\n          className=\"bg-border dark:bg-muted h-px\"\r\n          aria-hidden=\"true\"\r\n        />,\r\n      ];\r\n    });\r\n  }, [children, isMobile]);\r\n\r\n  if (isMobile) {\r\n    return (\r\n      <div\r\n        data-drop-drawer-group\r\n        data-slot=\"drop-drawer-group\"\r\n        role=\"group\"\r\n        className={cn(\r\n          \"bg-accent dark:bg-accent mx-2 my-3 overflow-hidden rounded-xl\",\r\n          className\r\n        )}\r\n        {...props}\r\n      >\r\n        {childrenWithSeparators}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // On desktop, use a div with proper role and attributes\r\n  return (\r\n    <div\r\n      data-drop-drawer-group\r\n      data-slot=\"drop-drawer-group\"\r\n      role=\"group\"\r\n      className={className}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Context for managing submenu state on mobile\r\ninterface SubmenuContextType {\r\n  activeSubmenu: string | null;\r\n  setActiveSubmenu: (id: string | null) => void;\r\n  submenuTitle: string | null;\r\n  setSubmenuTitle: (title: string | null) => void;\r\n  navigateToSubmenu?: (id: string, title: string) => void;\r\n  registerSubmenuContent?: (id: string, content: React.ReactNode[]) => void;\r\n}\r\n\r\nconst SubmenuContext = React.createContext<SubmenuContextType>({\r\n  activeSubmenu: null,\r\n  setActiveSubmenu: () => {},\r\n  submenuTitle: null,\r\n  setSubmenuTitle: () => {},\r\n  navigateToSubmenu: undefined,\r\n  registerSubmenuContent: undefined,\r\n});\r\n\r\n// Submenu components\r\n// Counter for generating simple numeric IDs\r\nlet submenuIdCounter = 0;\r\n\r\nfunction DropDrawerSub({\r\n  children,\r\n  id,\r\n  ...props\r\n}: React.ComponentProps<typeof DropdownMenuSub> & {\r\n  id?: string;\r\n}) {\r\n  const { isMobile } = useDropDrawerContext();\r\n  const { registerSubmenuContent } = React.useContext(SubmenuContext);\r\n\r\n  // Generate a simple numeric ID instead of using React.useId()\r\n  const [generatedId] = React.useState(() => `submenu-${submenuIdCounter++}`);\r\n  const submenuId = id || generatedId;\r\n\r\n  // Extract submenu content to register with parent\r\n  React.useEffect(() => {\r\n    if (!registerSubmenuContent) return;\r\n\r\n    // Find the SubContent within this Sub\r\n    const contentItems: React.ReactNode[] = [];\r\n    React.Children.forEach(children, (child) => {\r\n      if (React.isValidElement(child) && child.type === DropDrawerSubContent) {\r\n        // Add all children of the SubContent to the result\r\n        React.Children.forEach(\r\n          (child.props as { children?: React.ReactNode }).children,\r\n          (contentChild) => {\r\n            contentItems.push(contentChild);\r\n          }\r\n        );\r\n      }\r\n    });\r\n\r\n    // Register the content with the parent\r\n    if (contentItems.length > 0) {\r\n      registerSubmenuContent(submenuId, contentItems);\r\n    }\r\n  }, [children, registerSubmenuContent, submenuId]);\r\n\r\n  if (isMobile) {\r\n    // For mobile, we'll use the context to manage submenu state\r\n    // Process children to pass the submenu ID to the trigger and content\r\n    const processedChildren = React.Children.map(children, (child) => {\r\n      if (!React.isValidElement(child)) return child;\r\n\r\n      if (child.type === DropDrawerSubTrigger) {\r\n        return React.cloneElement(\r\n          child as React.ReactElement,\r\n          {\r\n            ...(child.props as object),\r\n            \"data-parent-submenu-id\": submenuId,\r\n            \"data-submenu-id\": submenuId,\r\n            // Use only data attributes, not custom props\r\n            \"data-parent-submenu\": submenuId,\r\n          } as React.HTMLAttributes<HTMLElement>\r\n        );\r\n      }\r\n\r\n      if (child.type === DropDrawerSubContent) {\r\n        return React.cloneElement(\r\n          child as React.ReactElement,\r\n          {\r\n            ...(child.props as object),\r\n            \"data-parent-submenu-id\": submenuId,\r\n            \"data-submenu-id\": submenuId,\r\n            // Use only data attributes, not custom props\r\n            \"data-parent-submenu\": submenuId,\r\n          } as React.HTMLAttributes<HTMLElement>\r\n        );\r\n      }\r\n\r\n      return child;\r\n    });\r\n\r\n    return (\r\n      <div\r\n        data-slot=\"drop-drawer-sub\"\r\n        data-submenu-id={submenuId}\r\n        id={submenuId}\r\n      >\r\n        {processedChildren}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // For desktop, pass the generated ID to the DropdownMenuSub\r\n  return (\r\n    <DropdownMenuSub\r\n      data-slot=\"drop-drawer-sub\"\r\n      data-submenu-id={submenuId}\r\n      // Don't pass id to DropdownMenuSub as it doesn't accept this prop\r\n      {...props}\r\n    >\r\n      {children}\r\n    </DropdownMenuSub>\r\n  );\r\n}\r\n\r\nfunction DropDrawerSubTrigger({\r\n  className,\r\n  inset,\r\n  children,\r\n  ...props\r\n}: React.ComponentProps<typeof DropdownMenuSubTrigger> & {\r\n  icon?: React.ReactNode;\r\n}) {\r\n  const { isMobile } = useDropDrawerContext();\r\n  const { navigateToSubmenu } = React.useContext(SubmenuContext);\r\n\r\n  // Define hooks outside of conditionals to follow React rules\r\n  // Check if this item is inside a group by looking at parent elements\r\n  const isInGroup = React.useCallback(\r\n    (element: HTMLElement | null): boolean => {\r\n      if (!element) return false;\r\n\r\n      // Check if any parent has a data-drop-drawer-group attribute\r\n      let parent = element.parentElement;\r\n      while (parent) {\r\n        if (parent.hasAttribute(\"data-drop-drawer-group\")) {\r\n          return true;\r\n        }\r\n        parent = parent.parentElement;\r\n      }\r\n      return false;\r\n    },\r\n    []\r\n  );\r\n\r\n  // Create a ref to check if the item is in a group\r\n  const itemRef = React.useRef<HTMLDivElement>(null);\r\n  const [isInsideGroup, setIsInsideGroup] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    // Only run this effect in mobile mode\r\n    if (!isMobile) return;\r\n\r\n    // Use a short timeout to ensure the DOM is fully rendered\r\n    const timer = setTimeout(() => {\r\n      if (itemRef.current) {\r\n        setIsInsideGroup(isInGroup(itemRef.current));\r\n      }\r\n    }, 0);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [isInGroup, isMobile]);\r\n\r\n  if (isMobile) {\r\n    // Find the parent submenu ID\r\n    const handleClick = (e: React.MouseEvent) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n\r\n      // Get the closest parent with data-submenu-id attribute\r\n      const element = e.currentTarget as HTMLElement;\r\n      let submenuId: string | null = null;\r\n\r\n      // First check if the element itself has the data attribute\r\n      if (element.closest(\"[data-submenu-id]\")) {\r\n        const closestElement = element.closest(\"[data-submenu-id]\");\r\n        const id = closestElement?.getAttribute(\"data-submenu-id\");\r\n        if (id) {\r\n          submenuId = id;\r\n        }\r\n      }\r\n\r\n      // If not found, try props\r\n      if (!submenuId) {\r\n        submenuId =\r\n          ((props as Record<string, unknown>)[\r\n            \"data-parent-submenu-id\"\r\n          ] as string) ||\r\n          ((props as Record<string, unknown>)[\"data-parent-submenu\"] as string);\r\n      }\r\n\r\n      if (!submenuId) {\r\n        return;\r\n      }\r\n\r\n      // Get the title\r\n      const title = typeof children === \"string\" ? children : \"Submenu\";\r\n\r\n      // Navigate to the submenu\r\n      if (navigateToSubmenu) {\r\n        navigateToSubmenu(submenuId, title);\r\n      }\r\n    };\r\n\r\n    // Combine onClick handlers\r\n    const combinedOnClick = (e: React.MouseEvent) => {\r\n      // Call the original onClick if provided\r\n      const typedProps = props as Record<string, unknown>;\r\n      if (typedProps.onClick) {\r\n        const originalOnClick =\r\n          typedProps.onClick as React.MouseEventHandler<HTMLDivElement>;\r\n        originalOnClick(e as React.MouseEvent<HTMLDivElement>);\r\n      }\r\n\r\n      // Call our navigation handler\r\n      handleClick(e);\r\n    };\r\n\r\n    // Remove onClick from props to avoid duplicate handlers\r\n    const { ...restProps } = props as Record<string, unknown>;\r\n\r\n    // Don't wrap in DrawerClose for submenu triggers\r\n    return (\r\n      <div\r\n        ref={itemRef}\r\n        data-slot=\"drop-drawer-sub-trigger\"\r\n        data-inset={inset}\r\n        className={cn(\r\n          \"flex cursor-pointer items-center justify-between px-4 py-4\",\r\n          // Only apply margin, background and rounded corners if not in a group\r\n          !isInsideGroup && \"bg-accent dark:bg-accent mx-2 my-1.5 rounded-md\",\r\n          // For items in a group, don't add background but add more padding\r\n          isInsideGroup && \"bg-transparent py-4\",\r\n          inset && \"pl-8\",\r\n          className\r\n        )}\r\n        onClick={combinedOnClick}\r\n        {...restProps}\r\n      >\r\n        <div className=\"flex items-center gap-2\">{children}</div>\r\n        <ChevronRightIcon className=\"h-5 w-5\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <DropdownMenuSubTrigger\r\n      data-slot=\"drop-drawer-sub-trigger\"\r\n      data-inset={inset}\r\n      className={className}\r\n      inset={inset}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </DropdownMenuSubTrigger>\r\n  );\r\n}\r\n\r\nfunction DropDrawerSubContent({\r\n  className,\r\n  sideOffset = 4,\r\n  children,\r\n  ...props\r\n}: React.ComponentProps<typeof DropdownMenuSubContent>) {\r\n  const { isMobile } = useDropDrawerContext();\r\n\r\n  if (isMobile) {\r\n    // For mobile, we don't render the content directly\r\n    // It will be rendered by the DropDrawerContent component when active\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <DropdownMenuSubContent\r\n      data-slot=\"drop-drawer-sub-content\"\r\n      sideOffset={sideOffset}\r\n      className={cn(\r\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border p-1 shadow-lg\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </DropdownMenuSubContent>\r\n  );\r\n}\r\n\r\nexport {\r\n  DropDrawer,\r\n  DropDrawerContent,\r\n  DropDrawerFooter,\r\n  DropDrawerGroup,\r\n  DropDrawerItem,\r\n  DropDrawerLabel,\r\n  DropDrawerSeparator,\r\n  DropDrawerSub,\r\n  DropDrawerSubContent,\r\n  DropDrawerSubTrigger,\r\n  DropDrawerTrigger,\r\n};\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components\\ui\\drawer.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Drawer({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) {\n  return <DrawerPrimitive.Root data-slot=\"drawer\" {...props} />\n}\n\nfunction DrawerTrigger({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Trigger>) {\n  return <DrawerPrimitive.Trigger data-slot=\"drawer-trigger\" {...props} />\n}\n\nfunction DrawerPortal({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Portal>) {\n  return <DrawerPrimitive.Portal data-slot=\"drawer-portal\" {...props} />\n}\n\nfunction DrawerClose({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Close>) {\n  return <DrawerPrimitive.Close data-slot=\"drawer-close\" {...props} />\n}\n\nfunction DrawerOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Overlay>) {\n  return (\n    <DrawerPrimitive.Overlay\n      data-slot=\"drawer-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Content>) {\n  return (\n    <DrawerPortal data-slot=\"drawer-portal\">\n      <DrawerOverlay />\n      <DrawerPrimitive.Content\n        data-slot=\"drawer-content\"\n        className={cn(\n          \"group/drawer-content bg-background fixed z-50 flex h-auto flex-col\",\n          \"data-[vaul-drawer-direction=top]:inset-x-0 data-[vaul-drawer-direction=top]:top-0 data-[vaul-drawer-direction=top]:mb-24 data-[vaul-drawer-direction=top]:max-h-[80vh] data-[vaul-drawer-direction=top]:rounded-b-lg data-[vaul-drawer-direction=top]:border-b\",\n          \"data-[vaul-drawer-direction=bottom]:inset-x-0 data-[vaul-drawer-direction=bottom]:bottom-0 data-[vaul-drawer-direction=bottom]:mt-24 data-[vaul-drawer-direction=bottom]:max-h-[80vh] data-[vaul-drawer-direction=bottom]:rounded-t-lg data-[vaul-drawer-direction=bottom]:border-t\",\n          \"data-[vaul-drawer-direction=right]:inset-y-0 data-[vaul-drawer-direction=right]:right-0 data-[vaul-drawer-direction=right]:w-3/4 data-[vaul-drawer-direction=right]:border-l data-[vaul-drawer-direction=right]:sm:max-w-sm\",\n          \"data-[vaul-drawer-direction=left]:inset-y-0 data-[vaul-drawer-direction=left]:left-0 data-[vaul-drawer-direction=left]:w-3/4 data-[vaul-drawer-direction=left]:border-r data-[vaul-drawer-direction=left]:sm:max-w-sm\",\n          className\n        )}\n        {...props}\n      >\n        <div className=\"bg-muted mx-auto mt-4 hidden h-2 w-[100px] shrink-0 rounded-full group-data-[vaul-drawer-direction=bottom]/drawer-content:block\" />\n        {children}\n      </DrawerPrimitive.Content>\n    </DrawerPortal>\n  )\n}\n\nfunction DrawerHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"drawer-header\"\n      className={cn(\"flex flex-col gap-1.5 p-4\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"drawer-footer\"\n      className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Title>) {\n  return (\n    <DrawerPrimitive.Title\n      data-slot=\"drawer-title\"\n      className={cn(\"text-foreground font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Description>) {\n  return (\n    <DrawerPrimitive.Description\n      data-slot=\"drawer-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "lib\\utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\r\nimport { twMerge } from \"tailwind-merge\"\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs))\r\n}\r\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "components\\ui\\dropdown-menu.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}\n\nfunction DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  )\n}\n\nfunction DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md\",\n          className\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  )\n}\n\nfunction DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  )\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: \"default\" | \"destructive\"\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  )\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        \"px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto size-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuPortal,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "hooks\\use-mobile.ts",
      "content": "import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}